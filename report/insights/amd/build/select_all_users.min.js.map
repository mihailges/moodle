{"version":3,"sources":["../src/select_all_users.js"],"names":["SELECTORS","SELECT_ALL","CLEAR_ALL","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","handleCheckboxToggle","setAllSelected","renderSelectAll","total","selectedall","clearAllSelected","selectedInsightsContainer","document","getElementById","innerHTML","templateData","selectednumber","checkedSlaves","length","slaves","selectedallonpage","selected","Templates","renderForPromise","html","js","replaceNodeContents","selectAll","querySelector","addEventListener","e","console","log","preventDefault","clearAll","init","root","allpredictsionids"],"mappings":"ifAuBA,OACA,OACA,O,25BAEMA,CAAAA,CAAS,CAAG,CACdC,UAAU,CAAE,aADE,CAEdC,SAAS,CAAE,YAFG,C,CAOZC,CAAsB,CAAG,UAAU,CACrCC,CAAM,CAACC,SAAP,CAAiBC,UAAkBC,MAAlB,CAAyBC,eAA1C,CAA2D,SAAUC,CAAV,CAAgB,CACvEC,CAAoB,CAACD,CAAD,CACvB,CAFD,CAGH,C,CAEKE,CAAc,CAAG,UAAM,CAQzBC,CAAe,CALM,CACjBC,KAAK,CAAE,GADU,CAEjBC,WAAW,GAFM,CAKN,CAClB,C,CAEKC,CAAgB,CAAG,UAAM,CAG3B,GAAMC,CAAAA,CAAyB,CAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAlC,CACAF,CAAyB,CAACG,SAA1B,CAAsC,EACzC,C,CAEKT,CAAoB,CAAG,SAACD,CAAD,CAAU,CAGnC,GAAIW,CAAAA,CAAY,CAAG,CACfP,KAAK,CAAE,GADQ,CAEfQ,cAAc,CAAEZ,CAAI,CAACa,aAAL,CAAmBC,MAFpB,CAAnB,CAKA,GAAId,CAAI,CAACe,MAAL,CAAYD,MAAZ,EAAsBd,CAAI,CAACa,aAAL,CAAmBC,MAA7C,CAAqD,CACjDH,CAAY,CAACK,iBAAb,GACH,CAFD,IAEO,IAAIhB,CAAI,CAACe,MAAL,CAAYD,MAAZ,EAAsBd,CAAI,CAACa,aAAL,CAAmBC,MAA7C,CAAqD,CACxDH,CAAY,CAACM,QAAb,GACH,CAEDd,CAAe,CAACQ,CAAD,CAClB,C,CAEKR,CAAe,4CAAE,WAAOQ,CAAP,kHACMO,WAAUC,gBAAV,CAA2B,mCAA3B,CAAgER,CAAhE,CADN,iBACZS,CADY,GACZA,IADY,CACNC,CADM,GACNA,EADM,CAEbd,CAFa,CAEeC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAFf,gBAGbS,WAAUI,mBAAV,CAA8Bf,CAA9B,CAAyDa,CAAzD,CAA+DC,CAA/D,CAHa,QAKbE,CALa,CAKDf,QAAQ,CAACgB,aAAT,CAAuBjC,CAAS,CAACC,UAAjC,CALC,CAMnB,GAAI+B,CAAJ,CAAe,CACXA,CAAS,CAACE,gBAAV,CAA2B,OAA3B,CAAoC,SAACC,CAAD,CAAO,CACvCC,OAAO,CAACC,GAAR,CAAY,WAAZ,EACAF,CAAC,CAACG,cAAF,GACA3B,CAAc,EACjB,CAJD,CAKH,CAEK4B,CAda,CAcFtB,QAAQ,CAACgB,aAAT,CAAuBjC,CAAS,CAACE,SAAjC,CAdE,CAenB,GAAIqC,CAAJ,CAAc,CACVA,CAAQ,CAACL,gBAAT,CAA0B,OAA1B,CAAmC,SAACC,CAAD,CAAO,CACtCA,CAAC,CAACG,cAAF,GACAvB,CAAgB,EACnB,CAHD,CAIH,CApBkB,yCAAF,uD,QA+BD,QAAPyB,CAAAA,IAAO,CAACC,CAAD,CAAOC,CAAP,CAA6B,CAC7CN,OAAO,CAACC,GAAR,CAAYK,CAAZ,EACAvC,CAAsB,CAACsC,CAAD,CACzB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @module     core_course/repository\n * @package    core_course\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    SELECT_ALL: '.select-all',\n    CLEAR_ALL: '.clear-all'\n};\n\nlet allSelected = false;\n\nconst registerListenerEvents = (root) => {\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, function (data) {\n        handleCheckboxToggle(data);\n    });\n};\n\nconst setAllSelected = () => {\n    allSelected = true;\n\n    const templateData = {\n        total: 1000,\n        selectedall: true\n    };\n\n    renderSelectAll(templateData);\n};\n\nconst clearAllSelected = () => {\n    allSelected = false;\n\n    const selectedInsightsContainer = document.getElementById('selected-insights');\n    selectedInsightsContainer.innerHTML = '';\n};\n\nconst handleCheckboxToggle = (data) => {\n    allSelected = false;\n\n    let templateData = {\n        total: 1000,\n        selectednumber: data.checkedSlaves.length\n    };\n\n    if (data.slaves.length == data.checkedSlaves.length) {\n        templateData.selectedallonpage = true;\n    } else if (data.slaves.length != data.checkedSlaves.length) {\n        templateData.selected = true;\n    }\n\n    renderSelectAll(templateData);\n};\n\nconst renderSelectAll= async (templateData) => {\n    const {html, js} = await Templates.renderForPromise('report_insights/selected_insights', templateData);\n    const selectedInsightsContainer = document.getElementById('selected-insights');\n    await Templates.replaceNodeContents(selectedInsightsContainer, html, js);\n\n    const selectAll = document.querySelector(SELECTORS.SELECT_ALL);\n    if (selectAll) {\n        selectAll.addEventListener('click', (e) => {\n            console.log('dasdasdas');\n            e.preventDefault();\n            setAllSelected();\n        });\n    }\n\n    const clearAll = document.querySelector(SELECTORS.CLEAR_ALL);\n    if (clearAll) {\n        clearAll.addEventListener('click', (e) => {\n            e.preventDefault();\n            clearAllSelected();\n        });\n    }\n};\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method init\n * @param {Number} courseid What course to fetch the data for\n * @param {Number} sectionid What section to fetch the data for\n * @return {object} jQuery promise\n */\nexport const init = (root, allpredictsionids) => {\n    console.log(allpredictsionids);\n    registerListenerEvents(root);\n};\n\n\n//\n//\n// import * as Templates from \"../../../../lib/amd/src/templates\";\n//\n// /**\n//  * This module manages prediction actions that require AJAX requests.\n//  *\n//  * @module report_insights/select_all_users\n//  */\n// define(['jquery',\n//         'core/str',\n//         'core/ajax',\n//         'core/notification',\n//         'core/url',\n//         'core/modal_factory',\n//         'core/modal_events',\n//         'core/pubsub',\n//         'core/checkbox-toggleall',\n//         'core/templates'\n//     ],\n//     function($,\n//              Str,\n//              Ajax,\n//              Notification,\n//              Url,\n//              ModalFactory,\n//              ModalEvents,\n//              PubSub,\n//              CheckboxToggleAll,\n//              Templates\n//     ) {\n//\n//         var SELECTORS = {\n//             SELECT_ALL: '.select-all',\n//             CLEAR_ALL: '.clear-all'\n//         };\n//\n//         var registerEventListeners = function(root) {\n//             PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, function (data) {\n//                 handleCheckboxToggle(data);\n//             });\n//\n//\n//         };\n//\n//         var allCheckboxesChecked = false;\n//         var selectAllUsers = false;\n//\n//         var handleCheckboxToggle = function(data) {\n//             let templateData = {\n//                 totalinsights: 1000\n//             };\n//\n//             if (data.slaves.length == data.checkedSlaves.length) {\n//                 templateData.selectedallinsightsonpage = true;\n//                 //document.getElementsByClassName('selected-insights')[0].innerHTML = \"All \" + data.checkedSlaves.length + \" insights on this page are selected.\";\n//\n//                 //alert(\"All checked\");\n//             } else if (data.slaves.length != data.checkedSlaves.length) {\n//                 templateData.selectedinsights = true;\n//                 //document.getElementsByClassName('selected-insights')[0].innerHTML = \"Selected \" + data.checkedSlaves.length + \" insights\";\n//                // alert(\"Not All checked\");\n//             }\n//\n//             const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/favourites',\n//                 {favourites: builtFaves});\n//\n//             Templates.render('report_insights/selected_insights', templateData).\n//         };\n//\n//         return {\n//\n//             /**\n//              * Attach on click handlers for bulk actions.\n//              *\n//              * @param {String} rootNode\n//              * @access public\n//              */\n//             init: function(root) {\n//\n//                 registerEventListeners(root);\n//\n//                 //     /**\n//                 //      * Executes the provided action.\n//                 //      *\n//                 //      * @param  {Array}  predictionIds\n//                 //      * @param  {Array}  predictionContainers\n//                 //      * @param  {String} actionName\n//                 //      * @return {Promise}\n//                 //      */\n//                 //     var executeAction = function(predictionIds, predictionContainers, actionName) {\n//                 //\n//                 //         return Ajax.call([\n//                 //             {\n//                 //                 methodname: 'report_insights_action_executed',\n//                 //                 args: {\n//                 //                     predictionids: predictionIds,\n//                 //                     actionname: actionName\n//                 //                 }\n//                 //             }\n//                 //         ])[0].then(function() {\n//                 //             // Remove the selected elements from the list.\n//                 //\n//                 //             var tableNode = false;\n//                 //             predictionContainers.forEach(function(el) {\n//                 //                 if (tableNode === false) {\n//                 //                     tableNode = el.closest('table');\n//                 //                 }\n//                 //                 el.remove();\n//                 //             });\n//                 //\n//                 //             if (tableNode.find('tbody > tr').length === 0) {\n//                 //                 let params = {\n//                 //                     contextid: tableNode.closest('div.insight-container').data('context-id'),\n//                 //                     modelid: tableNode.closest('div.insight-container').data('model-id')\n//                 //                 };\n//                 //                 window.location.assign(Url.relativeUrl(\"report/insights/insights.php\", params, false));\n//                 //             }\n//                 //             return;\n//                 //         }).catch(Notification.exception);\n//                 //     };\n//                 //\n//                 //     $(rootNode + ' [data-bulk-actionname]').on('click', function(e) {\n//                 //         e.preventDefault();\n//                 //         var action = $(e.currentTarget);\n//                 //         var actionName = action.data('bulk-actionname');\n//                 //         var actionVisibleName = action.text().trim();\n//                 //\n//                 //         var predictionIds = [];\n//                 //         var predictionContainers = [];\n//                 //\n//                 //         $('.insights-list input[data-togglegroup^=\"insight-bulk-action-\"][data-toggle=\"slave\"]:checked').each(function() {\n//                 //             var container = $(this).closest('tr[data-prediction-id]');\n//                 //             predictionContainers.push(container);\n//                 //             predictionIds.push(container.data('prediction-id'));\n//                 //         });\n//                 //\n//                 //         if (predictionIds.length === 0) {\n//                 //             // No items selected message.\n//                 //             return this;\n//                 //         }\n//                 //\n//                 //         var strings = [];\n//                 //         Str.get_strings([{\n//                 //                 key: 'confirmbulkaction',\n//                 //                 component: 'report_insights',\n//                 //                 param: {\n//                 //                     action: actionVisibleName,\n//                 //                     nitems: predictionIds.length\n//                 //                 }\n//                 //             }, {\n//                 //                 key: 'confirm',\n//                 //                 component: 'moodle'\n//                 //             }]\n//                 //         ).then(function(strs) {\n//                 //             strings = strs;\n//                 //             return ModalFactory.create({\n//                 //                 type: ModalFactory.types.SAVE_CANCEL,\n//                 //                 title: actionVisibleName,\n//                 //                 body: strings[0],\n//                 //             });\n//                 //         }).then(function(modal) {\n//                 //             modal.setSaveButtonText(strings[1]);\n//                 //             modal.show();\n//                 //             modal.getRoot().on(ModalEvents.save, function() {\n//                 //                 // The action is now confirmed, sending an action for it.\n//                 //                 return executeAction(predictionIds, predictionContainers, actionName);\n//                 //             });\n//                 //\n//                 //             return modal;\n//                 //         }).catch(Notification.exception);\n//                 //\n//                 //         return this;\n//                 //     });\n//                 // },\n//             }\n//         };\n//     });\n"],"file":"select_all_users.min.js"}