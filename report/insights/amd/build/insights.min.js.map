{"version":3,"sources":["../src/insights.js"],"names":["CLEAR_ALL","SELECTORS","CONTAINERS","SELECTED_PREDICTIONS_INFO","ACTIONS","SELECT_ALL","getPredictionCheckboxSelector","toggleGroup","getSelectedPredictions","selectedPredictions","JSON","parse","LocalStorage","get","setSelectedPredictions","set","stringify","getAllPredictions","selectedPredictionsInfo","document","querySelector","dataset","allpredictionids","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","toggleGroupName","handlePredictionToggle","addEventListener","e","target","matches","allPredictions","setGroupState","renderNotification","checkedSlaves","toArray","slaves","$","each","index","slave","predictionId","parseInt","val","isSelected","indexOf","wasSelected","length","push","splice","getTemplateData","notificationData","Templates","renderForPromise","html","js","replaceNodeContents","togglePredictionsOnLoad","predictionCheckboxElements","querySelectorAll","forEach","predictionCheckboxElement","value","checked","dispatchEvent","Event","actions","action","togglegroup","text","unshift","templateData","insightsselected","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @module     report_insights/insights\n * @package    report_insights\n * @copyright  2020 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport LocalStorage from 'core/localstorage';\n\nconst SELECT_ALL = 'select-all';\nconst CLEAR_ALL = 'clear-selection';\n\nconst SELECTORS = {\n    CONTAINERS: {\n        SELECTED_PREDICTIONS_INFO: '[data-region=\"selected-predictions-info\"]',\n    },\n    ACTIONS: {\n        SELECT_ALL: `[data-action=\"${SELECT_ALL}\"]`,\n        CLEAR_ALL: `[data-action=\"${CLEAR_ALL}\"]`,\n    }\n};\n\nconst getPredictionCheckboxSelector = (toggleGroup) => {\n    return `input[type=\"checkbox\"][data-toggle=\"slave\"][data-togglegroup=\"${toggleGroup}\"]`;\n};\n\nexport const getSelectedPredictions = () => {\n    const selectedPredictions = JSON.parse(LocalStorage.get('selectedPredictions'));\n    return selectedPredictions ? selectedPredictions : [];\n};\n\nexport const setSelectedPredictions = (selectedPredictions) => {\n    LocalStorage.set('selectedPredictions', JSON.stringify(selectedPredictions));\n};\n\nconst getAllPredictions = () => {\n    const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n    return JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n};\n\n/**\n * Register related event listeners.\n *\n * @method registerListenerEvents\n */\nconst registerListenerEvents = (toggleGroup) => {\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, (data) => {\n        if (data.toggleGroupName === toggleGroup) {\n            handlePredictionToggle(data);\n        }\n    });\n\n    document.addEventListener('click', async (e) => {\n\n        // All existing insights are selected.\n        if (e.target.matches(SELECTORS.ACTIONS.SELECT_ALL)) {\n            const allPredictions = getAllPredictions();\n\n            setSelectedPredictions(allPredictions);\n            CheckboxToggleAll.setGroupState(document, toggleGroup, true);\n\n            renderNotification(allPredictions, toggleGroup);\n        }\n\n        // Insight selection is cleared.\n        if (e.target.matches(SELECTORS.ACTIONS.CLEAR_ALL)) {\n            setSelectedPredictions([]);\n            CheckboxToggleAll.setGroupState(document, toggleGroup, false);\n\n            renderNotification([], toggleGroup);\n        }\n    });\n};\n\n/**\n * Method that handles the selection/deselection of predictions based on the 'checkboxToggled' event and\n * displays a notification depending on the number of selected insights.\n *\n * @method handlePredictionToggle\n * @param {Object} data The data returned by the 'checkboxToggled' event.\n */\nconst handlePredictionToggle = async (data) => {\n    const checkedSlaves = data.checkedSlaves.toArray();\n    const slaves = data.slaves.toArray();\n    let selectedPredictions = getSelectedPredictions();\n\n    $.each(slaves, (index, slave) => {\n        const predictionId = parseInt($(slave).val());\n        const isSelected = checkedSlaves.indexOf(slave) > -1;\n        const wasSelected = selectedPredictions.length > 0 &&\n            selectedPredictions.indexOf(predictionId) > -1;\n\n        if (isSelected && !wasSelected) {\n            selectedPredictions.push(predictionId);\n        } else if (!isSelected && wasSelected) {\n            selectedPredictions.splice(selectedPredictions.indexOf(predictionId), 1);\n        }\n    });\n\n    setSelectedPredictions(selectedPredictions);\n\n    renderNotification(selectedPredictions, data.toggleGroupName);\n};\n\n/**\n * Render notification.\n *\n * @method renderNotification\n * @param {Object} notificationData The object with the required data for the notification template.\n */\nconst renderNotification = async (selectedPredictions, toggleGroup) => {\n    const notificationData = await getTemplateData(selectedPredictions, toggleGroup);\n    const {html, js} = await Templates.renderForPromise('report_insights/insights_selected', notificationData);\n    await Templates.replaceNodeContents(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO, html, js);\n};\n\n/**\n * Remove notification.\n *\n * @method clearNotification\n */\nconst clearNotification = () => {\n    [...document.querySelectorAll(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO)].map(container => container.innerHTML = '');\n};\n\nconst togglePredictionsOnLoad = (toggleGroup) => {\n    const selectedPredictions = getSelectedPredictions();\n    const predictionCheckboxElements = document.querySelectorAll(getPredictionCheckboxSelector(toggleGroup));\n\n    predictionCheckboxElements.forEach(predictionCheckboxElement => {\n        const predictionId = parseInt(predictionCheckboxElement.value);\n        if (selectedPredictions.indexOf(predictionId) > -1) {\n            predictionCheckboxElement.checked = true;\n            predictionCheckboxElement.dispatchEvent(new Event('change'));\n        }\n    });\n\n    renderNotification(selectedPredictions);\n};\n\nconst getTemplateData = async (selectedPredictions, toggleGroup) => {\n    let actions = [];\n    const allPredictions = getAllPredictions();\n\n    if (selectedPredictions.length > 0) {\n        actions.push({\n            action: CLEAR_ALL,\n            togglegroup: toggleGroup,\n            text: await getString('clearselection', 'report_insights')\n        });\n\n        if (selectedPredictions.length !== allPredictions.length) {\n            actions.unshift({\n                action: SELECT_ALL,\n                togglegroup: toggleGroup,\n                text: await getString('selectallinsights', 'report_insights', allPredictions.length)\n            });\n        }\n    } else {\n        actions.push({\n            action: SELECT_ALL,\n            togglegroup: toggleGroup,\n            text: await getString('selectallinsights', 'report_insights', allPredictions.length)\n        });\n    }\n\n    const templateData = {\n        insightsselected: await getString('insightsselected', 'report_insights', selectedPredictions.length),\n        actions: actions\n    };\n\n    return templateData;\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n */\nexport const init = (toggleGroup) => {\n    registerListenerEvents(toggleGroup);\n    togglePredictionsOnLoad(toggleGroup);\n};\n"],"file":"insights.min.js"}