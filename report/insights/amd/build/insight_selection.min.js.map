{"version":3,"sources":["../src/insight_selection.js"],"names":["Actions","selectAll","clearAll","getSelectors","toggleGroup","containers","insightSelection","insightSelectionInfoSpan","insightSelectionActionsList","elements","insightSlaveCheckbox","actionToggle","selectAllInsights","clearSelectedInsights","selectedPredictionsStorageKey","document","body","id","setSelectedPredictions","selectedPredictions","LocalStorage","set","JSON","stringify","getSelectedPredictions","parse","get","getAllPredictions","insightSelectionContainer","querySelector","dataset","allpredictions","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","toggleGroupName","handlePredictionToggle","addEventListener","e","target","matches","preventDefault","allPredictions","setGroupState","renderInsightSelectionState","checkedPredictionsOnPage","checkedSlaves","toArray","predictionsOnPage","slaves","$","each","index","prediction","predictionId","parseInt","val","isSelected","indexOf","wasSelected","length","push","splice","renderInsightSelectionActionsList","renderInsightSelectionInfo","actions","action","togglegroup","text","unshift","Templates","renderForPromise","html","js","replaceNodeContents","insightSelectionInfoSpanElements","querySelectorAll","strData","nselected","ntotal","forEach","insightSelectionInfoSpanElement","innerHTML","setStateOnInit","predictionCheckboxElements","selectedPredictionsOnPage","actionToggleElements","actionToggleElement","removeAttribute","predictionCheckboxElement","value","map","selectedPrediction","checked","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @module     report_insights/insight_selection\n * @package    report_insights\n * @copyright  2020 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport LocalStorage from 'core/localstorage';\n\nconst Actions = {\n    selectAll: 'select-all',\n    clearAll: 'clear-selection'\n};\n\nconst getSelectors = (toggleGroup) => {\n    return {\n        containers: {\n            insightSelection: `[data-region=\"insight-selection\"][data-togglegroup=\"${toggleGroup}\"]`,\n            get insightSelectionInfoSpan() {\n                return `${this.insightSelection} [data-region=\"insight-selection-info\"] span`;\n            },\n            get insightSelectionActionsList() {\n                return `${this.insightSelection} [data-region=\"insight-selection-actions\"] ul`;\n            }\n        },\n        elements: {\n            insightSlaveCheckbox: `input[type=\"checkbox\"][data-toggle=\"slave\"][data-togglegroup=\"${toggleGroup}\"]`,\n            actionToggle: `[data-toggle=\"action\"][data-action=\"toggle\"][data-togglegroup=\"${toggleGroup}\"]`,\n            selectAllInsights: `[data-toggle=\"action\"][data-action=\"${Actions.selectAll}\"][data-togglegroup=\"${toggleGroup}\"]`,\n            clearSelectedInsights: `[data-toggle=\"action\"][data-action=\"${Actions.clearAll}\"][data-togglegroup=\"${toggleGroup}\"]`,\n        }\n    };\n};\n\n/**\n * Helper method that returns the local storage key of the stored selected predictions.\n *\n * @method selectedPredictionsStorageKey\n * @param {String} toggleGroup The name of the toggle group\n */\nconst selectedPredictionsStorageKey = (toggleGroup) => {\n    return `${document.body.id}-${toggleGroup}`;\n};\n\n/**\n * Stores the IDs of the selected predictions in the local storage.\n *\n * @method setSelectedPredictions\n * @param {Array} selectedPredictions The array containing the IDs of the selected predictions\n * @param {String} toggleGroup The name of the toggle group\n */\nconst setSelectedPredictions = (selectedPredictions, toggleGroup) => {\n    LocalStorage.set(selectedPredictionsStorageKey(toggleGroup), JSON.stringify(selectedPredictions));\n};\n\n/**\n * Fetches all selected predictions from the local storage and returns an array containing the IDs of the predictions.\n *\n * @method getSelectedPredictions\n * @param {String} toggleGroup The name of the toggle group\n * @return {Array}\n */\nexport const getSelectedPredictions = (toggleGroup) => {\n    const selectedPredictions = JSON.parse(LocalStorage.get(selectedPredictionsStorageKey(toggleGroup)));\n    return selectedPredictions ? selectedPredictions : [];\n};\n\n/**\n * Returns an array containing the IDs of all existing predictions.\n *\n * @method getAllPredictions\n * @param {String} toggleGroup The name of the toggle group\n * @return {Array}\n */\nconst getAllPredictions = (toggleGroup) => {\n    const insightSelectionContainer = document.querySelector(getSelectors(toggleGroup).containers.insightSelection);\n    return JSON.parse(insightSelectionContainer.dataset.allpredictions);\n};\n\n/**\n * Register insight selection related event listeners.\n *\n * @method registerListenerEvents\n * @param {String} toggleGroup The name of the toggle group\n */\nconst registerListenerEvents = (toggleGroup) => {\n    // Subscribe to the 'checkboxToggled' event.\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, (data) => {\n        // If the captured event is related to the given toggle group, handle the event data.\n        if (data.toggleGroupName === toggleGroup) {\n            handlePredictionToggle(data);\n        }\n    });\n\n    document.addEventListener('click', async (e) => {\n        // All existing insights are selected.\n\n        if (e.target.matches(getSelectors(toggleGroup).elements.selectAllInsights)) {\n            e.preventDefault();\n            const allPredictions = getAllPredictions(toggleGroup);\n            // Set all existing predictions from a given toggle group as selected.\n            setSelectedPredictions(allPredictions, toggleGroup);\n            // Check all prediction checkboxes on the page from a given toggle group.\n            CheckboxToggleAll.setGroupState(document, toggleGroup, true);\n\n            renderInsightSelectionState(allPredictions, toggleGroup);\n        }\n\n        // Insight selection is cleared.\n        if (e.target.matches(getSelectors(toggleGroup).elements.clearSelectedInsights)) {\n            e.preventDefault();\n            // Reset all selected insights.\n            setSelectedPredictions([], toggleGroup);\n            // Uncheck all prediction checkboxes on the page from a given toggle group.\n            CheckboxToggleAll.setGroupState(document, toggleGroup, false);\n\n            renderInsightSelectionState([], toggleGroup);\n        }\n    });\n};\n\n/**\n * Method that handles the change of state of the prediction selection based on the data returned by the\n * 'checkboxToggled' event.\n *\n * @method handlePredictionToggle\n * @param {Object} data The data returned by the 'checkboxToggled' event\n */\nconst handlePredictionToggle = (data) => {\n    // Array containing all currently checked prediction (slave) checkbox elements on the page.\n    const checkedPredictionsOnPage = data.checkedSlaves.toArray();\n    // Array containing all prediction (slave) checkbox elements on the current page.\n    const predictionsOnPage = data.slaves.toArray();\n    // Get all previously selected predictions in the given toggle group.\n    let selectedPredictions = getSelectedPredictions(data.toggleGroupName);\n\n    // Loop through each prediction checkbox element on the current page.\n    $.each(predictionsOnPage, (index, prediction) => {\n        const predictionId = parseInt($(prediction).val());\n        // Whether the current prediction checkbox element is currently selected.\n        const isSelected = checkedPredictionsOnPage.indexOf(prediction) > -1;\n        // Whether the current prediction checkbox element was previously selected.\n        const wasSelected = selectedPredictions.length > 0 &&\n            selectedPredictions.indexOf(predictionId) > -1;\n\n        if (isSelected && !wasSelected) { // The prediction checkbox element is selected and was not previously.\n            // The current prediction was selected in the latest change of state, therefore add the current prediction\n            // to the selected predictions.\n            selectedPredictions.push(predictionId);\n        } else if (!isSelected && wasSelected) { // The prediction checkbox element is not selected and it was previously.\n            // The current predictions was unselected in the latest change of state, therefore remove the current\n            // prediction from the selected predictions.\n            selectedPredictions.splice(selectedPredictions.indexOf(predictionId), 1);\n        }\n    });\n\n    setSelectedPredictions(selectedPredictions, data.toggleGroupName);\n\n    renderInsightSelectionState(selectedPredictions, data.toggleGroupName);\n};\n\n/**\n * Render notification.\n *\n * @method renderNotification\n * @param {Object} notificationData The object with the required data for the notification template.\n */\nconst renderInsightSelectionState = (selectedPredictions, toggleGroup) => {\n    renderInsightSelectionActionsList(selectedPredictions, toggleGroup);\n    renderInsightSelectionInfo(selectedPredictions, toggleGroup);\n};\n\n/**\n * Helper method that returns the proper template data depending on the selected predictions.\n *\n * @method getTemplateData\n * @param {Array} selectedPredictions The array containing the IDs of the selected predictions\n * @param {String} toggleGroup The name of the toggle group\n */\nconst renderInsightSelectionActionsList = async (selectedPredictions, toggleGroup) => {\n    let actions = [];\n    // Get the IDs of all existing predictions.\n    const allPredictions = getAllPredictions(toggleGroup);\n\n    if (selectedPredictions.length > 0) { // There is at least one selected prediction.\n        // Display the 'Clear all' option in the actions list.\n        actions.push({\n            action: Actions.clearAll,\n            togglegroup: toggleGroup,\n            text: await getString('clearselection', 'report_insights')\n        });\n\n        if (selectedPredictions.length !== allPredictions.length) { // There are still some unselected predictions.\n            // Display the 'Select all' option in the actions list.\n            actions.unshift({\n                action: Actions.selectAll,\n                togglegroup: toggleGroup,\n                text: await getString('selectall', 'core', allPredictions.length)\n            });\n        }\n    } else { // There aren't any selected predictions.\n        // Display the 'Select all' option in the actions list.\n        actions.push({\n            action: Actions.selectAll,\n            togglegroup: toggleGroup,\n            text: await getString('selectall', 'core', allPredictions.length)\n        });\n    }\n\n    const {html, js} = await Templates.renderForPromise('report_insights/insight_selection_actions_list',\n        {actions: actions});\n    await Templates.replaceNodeContents(getSelectors(toggleGroup).containers.insightSelectionActionsList, html, js);\n};\n\nconst renderInsightSelectionInfo = (selectedPredictions, toggleGroup) => {\n    const allPredictions = getAllPredictions(toggleGroup);\n    const insightSelectionInfoSpanElements = document.querySelectorAll(\n        getSelectors(toggleGroup).containers.insightSelectionInfoSpan);\n    const strData = {\n        nselected: selectedPredictions.length,\n        ntotal: allPredictions.length\n    };\n\n    insightSelectionInfoSpanElements.forEach(async (insightSelectionInfoSpanElement) => {\n        insightSelectionInfoSpanElement.innerHTML = await getString('insightsselected', 'report_insights', strData);\n    });\n};\n\n/**\n * Method that pre-sets the state of the prediction selection elements on page init.\n *\n * @method setStateOnInit\n * @param {String} toggleGroup The name of the toggle group\n */\nconst setStateOnInit = (toggleGroup) => {\n    // Get all selected predictions in the given toggle group.\n    const selectedPredictions = getSelectedPredictions(toggleGroup);\n    // Get all prediction (slave) checkbox elements on the current page.\n    const predictionCheckboxElements = document.querySelectorAll(getSelectors(toggleGroup).elements.insightSlaveCheckbox);\n    let selectedPredictionsOnPage = [];\n\n    // If at least one prediction has been selected in the given toggle group, enable every existing action element\n    // related to that toggle group.\n    if (selectedPredictions.length > 0) {\n        const actionToggleElements = document.querySelectorAll(getSelectors(toggleGroup).elements.actionToggle);\n        actionToggleElements.forEach(actionToggleElement => {\n            actionToggleElement.removeAttribute('disabled');\n        });\n    }\n\n    // Loop through each prediction (slave) checkbox element from the current page.\n    predictionCheckboxElements.forEach(predictionCheckboxElement => {\n        const predictionId = parseInt(predictionCheckboxElement.value);\n        if (selectedPredictions.indexOf(predictionId) > -1) {\n            selectedPredictionsOnPage.push(predictionCheckboxElement);\n        }\n    });\n\n    if (predictionCheckboxElements.length === selectedPredictionsOnPage.length) {\n        CheckboxToggleAll.setGroupState(document, toggleGroup, true);\n    } else {\n        selectedPredictionsOnPage.map(selectedPrediction => {\n            selectedPrediction.checked = true;\n        });\n    }\n\n    renderInsightSelectionState(selectedPredictions, toggleGroup);\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n */\nexport const init = (toggleGroup) => {\n    setStateOnInit(toggleGroup);\n    registerListenerEvents(toggleGroup);\n};\n"],"file":"insight_selection.min.js"}