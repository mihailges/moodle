{"version":3,"sources":["../src/addblockmodal.js"],"names":["SELECTORS","ADD_BLOCK","registerListenerEvents","pageContextId","pageType","pageLayout","addBlockUrl","document","addEventListener","e","target","closest","preventDefault","bodyPromise","Promise","resolve","bodyPromiseResolver","buildAddBlockModal","getAddableBlocks","catch","Templates","render","message","blocks","ModalFactory","create","type","types","CANCEL","title","body","then","modal","show","request","methodname","args","pagecontextid","pagetype","pagelayout","Ajax","call","init"],"mappings":"sMAyBA,OACA,OAEA,O,qXAEMA,CAAAA,CAAS,CAAG,CACdC,SAAS,CAAE,yBADG,C,CAaZC,CAAsB,CAAG,SAACC,CAAD,CAAgBC,CAAhB,CAA0BC,CAA1B,CAAsCC,CAAtC,CAAsD,CACjFC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,4CAAmC,WAAMC,CAAN,iGAE3BA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBX,CAAS,CAACC,SAA3B,CAF2B,kBAG3BQ,CAAC,CAACG,cAAF,GAIMC,CAPqB,CAOP,GAAIC,CAAAA,OAAJ,CAAY,SAAAC,CAAO,CAAI,CACvCC,CAAmB,CAAGD,CACzB,CAFmB,CAPO,CAY3BE,CAAkB,CAACJ,CAAD,CAAlB,CAZ2B,eAeNK,CAAAA,CAAgB,CAACf,CAAD,CAAgBC,CAAhB,CAA0BC,CAA1B,CAAhB,CAAsDc,KAAtD,4CAA4D,WAAMV,CAAN,wFAE7EO,CAF6E,gBAEnDI,WAAUC,MAAV,CAAiB,yBAAjB,CAA4C,CAAC,QAAWZ,CAAC,CAACa,OAAd,CAA5C,CAFmD,2EAA5D,wDAfM,QAerBC,CAfqB,WAoBtBA,CApBsB,uDAwB3BP,CAxB2B,iBAwBDI,WAAUC,MAAV,CACtB,qBADsB,CACC,CAAC,OAAUE,CAAX,CAAmB,IAAOjB,CAA1B,CADD,CAxBC,6EAAnC,wDA4BH,C,CASKW,CAAkB,CAAG,SAACJ,CAAD,CAAiB,CACxC,MAAOW,WAAaC,MAAb,CAAoB,CACvBC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,MADF,CAEvBC,KAAK,CAAE,iBAAU,UAAV,CAFgB,CAGvBC,IAAI,CAAEjB,CAHiB,CAApB,EAIJkB,IAJI,CAIC,SAAAC,CAAK,CAAI,CACbA,CAAK,CAACC,IAAN,GACA,MAAOD,CAAAA,CACV,CAPM,CAQV,C,CAWKd,CAAgB,4CAAG,WAAMf,CAAN,CAAqBC,CAArB,CAA+BC,CAA/B,yFACf6B,CADe,CACL,CACZC,UAAU,CAAE,oCADA,CAEZC,IAAI,CAAE,CACFC,aAAa,CAAElC,CADb,CAEFmC,QAAQ,CAAElC,CAFR,CAGFmC,UAAU,CAAElC,CAHV,CAFM,CADK,0BAUdmC,UAAKC,IAAL,CAAU,CAACP,CAAD,CAAV,EAAqB,CAArB,CAVc,0CAAH,uD,QAsBF,QAAPQ,CAAAA,IAAO,CAACvC,CAAD,CAAgBC,CAAhB,CAA0BC,CAA1B,CAAsCC,CAAtC,CAAsD,CACtEJ,CAAsB,CAACC,CAAD,CAAgBC,CAAhB,CAA0BC,CAA1B,CAAsCC,CAAtC,CACzB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Show an add block modal instead of doing it on a separate page.\n *\n * @module     core/addblockmodal\n * @class      addblockmodal\n * @package    core\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nconst SELECTORS = {\n    ADD_BLOCK: '[data-key=\"addblock\"]'\n};\n\n/**\n * Register related event listeners.\n *\n * @method registerListenerEvents\n * @param {Number} pageContextId The context ID of the page\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} addBlockUrl The add block URL\n */\nconst registerListenerEvents = (pageContextId, pageType, pageLayout, addBlockUrl) => {\n    document.addEventListener('click', async(e) => {\n\n        if (e.target.closest(SELECTORS.ADD_BLOCK)) {\n            e.preventDefault();\n            // We want to instantly display the 'add block' modal while loading the body content. Once the blocks data\n            // has been fetched, the body will be populated with the content.\n            let bodyPromiseResolver;\n            const bodyPromise = new Promise(resolve => {\n                bodyPromiseResolver = resolve;\n            });\n\n            // Build and instantly display the 'add block' modal.\n            buildAddBlockModal(bodyPromise);\n\n            // Fetch all addable blocks in the given page.\n            const blocks = await getAddableBlocks(pageContextId, pageType, pageLayout).catch(async(e) => {\n                // If the promise is rejected, display the captured error in the modal.\n                bodyPromiseResolver(await Templates.render('core/notification_error', {'message': e.message}));\n            });\n\n            if (!blocks) {\n                return;\n            }\n            // If the blocks data has been successfully fetched, render the content within the modal's body.\n            bodyPromiseResolver(await Templates.render(\n                'core/add_block_body', {'blocks': blocks, 'url': addBlockUrl}));\n        }\n    });\n};\n\n/**\n * Method that creates and instantly displays the 'add block' modal.\n *\n * @method buildAddBlockModal\n * @param {Promise} bodyPromise\n * @return {Object} The displayed modal (modal's body will be rendered later).\n */\nconst buildAddBlockModal = (bodyPromise) => {\n    return ModalFactory.create({\n        type: ModalFactory.types.CANCEL,\n        title: getString('addblock'),\n        body: bodyPromise\n    }).then(modal => {\n        modal.show();\n        return modal;\n    });\n};\n\n/**\n * Method that fetches all addable blocks in a given page.\n *\n * @method getAddableBlocks\n * @param {Number} pageContextId The context ID of the page\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @return {Promise}\n */\nconst getAddableBlocks = async(pageContextId, pageType, pageLayout) => {\n    const request = {\n        methodname: 'core_block_get_page_addable_blocks',\n        args: {\n            pagecontextid: pageContextId,\n            pagetype: pageType,\n            pagelayout: pageLayout\n        },\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n * @param {Number} pageContextId The context ID of the page\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} addBlockUrl The add block URL\n */\nexport const init = (pageContextId, pageType, pageLayout, addBlockUrl) => {\n    registerListenerEvents(pageContextId, pageType, pageLayout, addBlockUrl);\n};\n"],"file":"addblockmodal.min.js"}