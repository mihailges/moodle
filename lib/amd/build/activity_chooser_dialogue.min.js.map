{"version":3,"sources":["../src/activity_chooser_dialogue.js"],"names":["define","Y","$","PubSub","ActivityChooserEvents","FocusLock","ModalFactory","panel","container","options","listenevents","bodycontent","headercontent","ATTRS","minheight","baseheight","maxheight","closeButtonTitle","validator","Lang","isString","value","cancelListenevents","thisevent","length","shift","off","hide","cancelPopup","e","preventDefault","prepareChooser","create","type","types","DEFAULT","body","html","title","large","then","modal","show","centerDialogue","dialogue","bb","get","winheight","newheight","totalheight","shouldResizeFullscreen","lockScroll","isActive","enableScrollLock","disableScrollLock","css","dialogueheight","getStyle","match","replace","updateHiddenRadioValue","name","attr","optionSelected","publish","OPTION_SELECTED","openTypeSummary","typeSummaryElement","position","scrollTop","height","outerHeight","addClass","setTypeSummaryPositionAndHeight","typeSummaryContentElement","find","cancelAction","addAction","trapFocus","element","typeSummaryContentEl","typeSumarryFooterEl","footerHeight","moveToOption","fromOption","toOption","focus","setupChooserDialogue","header","displayChooser","sectionid","anchors"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A system for displaying notifications to users from the session.\n *\n * Wrapper for the YUI M.core.notification class. Allows us to\n * use the YUI version in AMD code until it is replaced.\n *\n * @module     core/activity_chooser_dialogue\n * @package    core\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.7\n */\ndefine(\n    [\n        'core/yui',\n        'jquery',\n        'core/pubsub',\n        'core/activity_chooser_events',\n        'core/local/aria/focuslock',\n        'core/modal_factory'\n    ],\n    function(\n        Y,\n        $,\n        PubSub,\n        ActivityChooserEvents,\n        FocusLock,\n        ModalFactory\n    ) {\n\n     // The panel widget\n    var panel = null;\n\n    // The submit button - we disable this until an element is set\n    var submitbutton = null;\n\n    // The chooserdialogue container\n    var container = null;\n\n    var options = null;\n\n    // Any event listeners we may need to cancel later\n    var listenevents = [];\n\n    var bodycontent = null;\n    var headercontent = null;\n    var instanceconfig = null;\n\n    // The hidden field storing the disabled element values for submission.\n    var hiddenRadioValue = null;\n\n    var ATTRS = {\n        /**\n         * The minimum height (in pixels) before resizing is prevented and scroll\n         * locking disabled.\n         *\n         * @attribute minheight\n         * @type Number\n         * @default 300\n         */\n        minheight: 300,\n\n        /**\n         * The base height??\n         *\n         * @attribute baseheight\n         * @type Number\n         * @default 400\n         */\n        baseheight: 400,\n\n        /**\n         * The maximum height (in pixels) at which we stop resizing.\n         *\n         * @attribute maxheight\n         * @type Number\n         * @default 300\n         */\n        maxheight: 660,\n\n        /**\n         * The title of the close button.\n         *\n         * @attribute closeButtonTitle\n         * @type String\n         * @default 'Close'\n         */\n        closeButtonTitle: {\n            validator: Y.Lang.isString,\n            value: 'Close'\n        }\n    };\n\n    var setupChooserDialogue = function(body, header, config) {\n        bodycontent = body;\n        headercontent = header;\n        instanceconfig = config;\n    };\n\n    /**\n     * Cancel any listen events in the listenevents queue\n     *\n     * Several locations add event handlers which should only be called before the form is submitted. This provides\n     * a way of cancelling those events.\n     *\n     * @method cancel_listenevents\n     */\n    var cancelListenevents = function() {\n        // Detach all listen events to prevent duplicate triggers\n        var thisevent;\n        while (listenevents.length) {\n            thisevent = listenevents.shift();\n            $(thisevent).off();\n        }\n    };\n\n    var hide = function() {\n        // Cancel all listen events\n        cancelListenevents();\n        container.off();\n        panel.hide();\n    };\n\n    var cancelPopup = function(e) {\n        // Prevent normal form submission before hiding\n        e.preventDefault();\n        hide();\n    };\n\n      /**\n     * Return an array of class names prefixed with 'modchooserdialogue-' and\n     * the name of the type of dialogue.\n     *\n     * Note: Class name are converted to lower-case.\n     *\n     * If an array of arguments is supplied, each of these is prefixed and\n     * lower-cased also.\n     *\n     * If no arguments are supplied, then the prefix is returned on it's\n     * own.\n     *\n     * @method _getClassNames\n     * @param {Array} [args] Any additional names to prefix and lower-case.\n     * @return {Array}\n     * @private\n     */\n    var _getClassNames = function(args) {\n        var prefix = 'modchooserdialogue-course-modchooser',\n            results = [];\n\n        results.push(prefix.toLowerCase());\n        if (args) {\n            var arg;\n            for (arg in args) {\n                results.push((prefix + '-' + arg).toLowerCase());\n            }\n        }\n\n        return results;\n    };\n\n    var prepareChooser = function() {\n\n\n        // if (panel) {\n        //     return;\n        // }\n\n        // panel = ModalFactory.create({\n        //     title: headercontent.html(),\n        //     body: bodycontent.html(),\n        //     type: ModalFactory.types.DEFAULT,\n        //     large: true\n        // });\n\n    return ModalFactory.create({\n        type: ModalFactory.types.DEFAULT,\n        body: bodycontent.html(),\n        title: headercontent.html(),\n        large: true\n    })\n    .then(function(modal) {\n        // modal.setSaveButtonText(titlePromise);\n        //\n        // // When the dialog is closed, perform the callback (if provided).\n        // modal.getRoot().on(ModalEvents.hidden, function() {\n        //     if (callback) {\n        //         callback();\n        //     }\n        //     modal.getRoot().remove();\n        // });\n        //\n        // modal.getRoot().on(ModalEvents.save, function() {\n        //     let messageText = modal.getRoot().find('form textarea').val();\n        //     sendMessage(messageText, users);\n        // });\n\n        modal.show();\n\n        return modal;\n    });\n\n        // // Ensure that we're showing the JS version of the chooser.\n        // $('body').addClass('jschooser');\n        // // Set Default options.\n        // var paramkey,\n        //     params = {\n        //         bodyContent: bodycontent.html(),\n        //         headerContent: headercontent.html(),\n        //         width: '540px',\n        //         draggable: true,\n        //         visible: false, // Hide by default\n        //         zindex: 100, // Display in front of other items\n        //         modal: true, // This dialogue should be modal.\n        //         shim: true,\n        //         closeButtonTitle: ATTRS.closeButtonTitle,\n        //         focusOnPreviousTargetAfterHide: true,\n        //         render: false,\n        //         extraClasses: _getClassNames()\n        //     };\n        //\n        // // Override with additional options.\n        // for (paramkey in instanceconfig) {\n        //   params[paramkey] = instanceconfig[paramkey];\n        // }\n        //\n        // // Create the panel\n        // panel = new M.core.dialogue(params);\n        //\n        // // Remove the template for the chooser.\n        // bodycontent.remove();\n        // headercontent.remove();\n        //\n        // // Hide and then render the panel.\n        // panel.hide();\n        // panel.render();\n        //\n        // // Set useful links.\n        // container = $(panel.get('boundingBox').one('.modchoosercontainer').getDOMNode());\n        // options = container.find('.option');\n        // // Get the first option and set the tabindex.\n        // var firstOption = options[0];\n        // $(firstOption).attr(\"tabindex\", 0);\n        //\n        // var moreinfolinks = container.find('.helplinkpopup');\n        // moreinfolinks.each(function(key, moreinfolink) {\n        //     $(moreinfolink).attr('tabindex', -1);\n        // });\n        //\n        // // Add the chooserdialogue class to the container for styling.\n        // panel.get('boundingBox').addClass('modchooserdialogue');\n    };\n\n    /**\n      * Calculate the optimum height of the chooser dialogue\n      *\n      * This tries to set a sensible maximum and minimum to ensure that some options are always shown, and preferably\n      * all, whilst fitting the box within the current viewport.\n      *\n      * @method center_dialogue\n      * @param Node {dialogue} Y.Node The dialogue\n      */\n    var centerDialogue = function(dialogue) {\n        var bb = panel.get('boundingBox'),\n            winheight = bb.get('winHeight'),\n            newheight, totalheight;\n\n        if (panel.shouldResizeFullscreen()) {\n            // No custom sizing required for a fullscreen dialog.\n            return;\n        }\n\n        // Try and set a sensible max-height -- this must be done before setting the top\n        // Set a default height of 640px\n        newheight = ATTRS.maxheight;\n        if (winheight <= newheight) {\n            // Deal with smaller window sizes\n            if (winheight <= ATTRS.minheight) {\n                newheight = ATTRS.minheight;\n            } else {\n                newheight = winheight;\n            }\n        }\n\n        // If the dialogue is larger than a reasonable minimum height, we\n        // disable the page scrollbars.\n        if (newheight > ATTRS.minheight) {\n            // Disable the page scrollbars.\n            if (panel.lockScroll && !panel.lockScroll.isActive()) {\n                panel.lockScroll.enableScrollLock(true);\n            }\n        } else {\n            // Re-enable the page scrollbars.\n            if (panel.lockScroll && panel.lockScroll.isActive()) {\n                panel.lockScroll.disableScrollLock();\n            }\n        }\n\n        // Take off 15px top and bottom for borders, plus 40px each for the title and button area before setting the\n        // new max-height.\n        totalheight = newheight;\n        newheight = newheight - (15 + 15 + 40 + 40);\n        $(dialogue).css('maxHeight', newheight + 'px');\n\n        var dialogueheight = bb.getStyle('height');\n        if (dialogueheight.match(/.*px$/)) {\n            dialogueheight = dialogueheight.replace(/px$/, '');\n        } else {\n            dialogueheight = totalheight;\n        }\n\n        if (dialogueheight < ATTRS.baseheight) {\n            dialogueheight = ATTRS.baseheight;\n            $(dialogue).css('height', dialogueheight + 'px');\n        }\n\n        panel.centerDialogue();\n    };\n\n    var handleKeyPress = function(e) {\n        if (e.keyCode === 27) {\n            cancelPopup(e);\n        }\n\n        if (e.keyCode === 39) {\n            var focusedElement = $(\":focus\");\n            console.log(focusedElement);\n            console.log(options);\n            // if ($(\":focus\").hasClass('.option')) {\n            //\n            // }\n        }\n    };\n\n    var updateHiddenRadioValue = function(name, value) {\n        hiddenRadioValue.attr({\n            value: value,\n            name: name\n        });\n    };\n\n    var optionSelected = function(e) {\n        // Set a hidden input field with the value and name of the radio button.  When we submit the form, we\n        // disable the radios to prevent duplicate submission. This has the result however that the value is never\n        // submitted so we set this value to a hidden field instead.\n        updateHiddenRadioValue(e.name, e.value);\n        PubSub.publish(ActivityChooserEvents.OPTION_SELECTED, e);\n    };\n\n    var checkOptions = function() {\n        // Check which options are set, and change the parent class\n        // to show/hide help as required.\n        options.each(function(key, option) {\n            var optiondiv = $(option).parent().parent();\n            if ($(this).is(':checked')) {\n                $(optiondiv).addClass('selected');\n\n                // Trigger any events for this option.\n                optionSelected(option);\n\n                // Ensure that the form may be submitted.\n                submitbutton.removeAttr('disabled');\n\n                // Ensure that the radio remains focus so that keyboard navigation is still possible.\n                $(option).focus();\n            } else {\n                optiondiv.removeClass('selected');\n            }\n        }, this);\n    };\n\n    var openTypeSummary = function(typeSummaryElement) {\n        // Get the current scroll position of the .alloption element.\n        var position = $('.alloptions').scrollTop();\n        // Get the height of the .alloption element.\n        var height = $('.alloptions').outerHeight();\n        // Disable the scroll of .alloptions.\n        $('.alloptions').addClass('noscroll');\n\n        setTypeSummaryPositionAndHeight(typeSummaryElement, position, height);\n\n        var typeSummaryContentElement = typeSummaryElement.find('.content');\n        // Set the scroll of the type summary content element to top.\n        if (typeSummaryContentElement.scrollTop() > 0) {\n            typeSummaryContentElement.scrollTop(0);\n        }\n        // Show the particular summary overlay.\n        typeSummaryElement.addClass('open');\n        var cancelAction = typeSummaryElement.find('.closetypesummary');\n        var addAction = typeSummaryElement.find('.addbutton');\n\n        $(cancelAction).attr('tabindex', 0);\n        $(addAction).attr('tabindex', 0);\n\n        FocusLock.trapFocus(typeSummaryElement);\n    };\n\n    var setTypeSummaryPositionAndHeight = function(element, position, height) {\n        var typeSummaryContentEl = element.find('.content');\n        var typeSumarryFooterEl = element.find('.action-footer');\n        var footerHeight = typeSumarryFooterEl.height();\n        var contentHeight = height - footerHeight;\n\n        typeSummaryContentEl.css({'height' : contentHeight + 'px'});\n\n        element.css({'top' : position + 'px', 'height' : height + 'px'});\n    };\n\n    var moveToOption = function(fromOption, toOption) {\n        $(toOption).attr('tabindex', 0);\n        $(toOption).focus();\n        $(fromOption).attr('tabindex', -1);\n    };\n\n    /**\n      * Display the module chooser.\n      *\n      * @method display_chooser\n      * @param {EventFacade} e Triggering Event\n      */\n    var displayChooser = function(e, sectionid) {\n        var bb, dialogue, thisevent;\n        prepareChooser();\n\n        // Stop the default event actions before we proceed.\n        e.preventDefault();\n\n        panel.show();\n\n        return;\n\n       // bb = panel.get('boundingBox');\n        dialogue = container.find('.alloptions');\n\n        // Find all anchors used to add an activity and append the section param to the url.\n        var anchors = dialogue.find('.option .modicon a, .option .typesummary .action-footer .addbutton');\n        anchors.each(function(index, anchor) {\n            anchor.href += '&section=' + sectionid;\n        });\n\n        thisevent = $('.info.actionelement').on('click', function(e) {\n            var typeSummaryEl = $(e.target).closest('label').find('.typesummary');\n            openTypeSummary(typeSummaryEl);\n        });\n        listenevents.push(thisevent);\n\n        thisevent = $('.closetypesummary').on('click', function(e) {\n            setTimeout(function() {\n                var typeSummaryEl = $(e.target).closest('label').find('.typesummary');\n                typeSummaryEl.removeClass('open');\n\n                $('.alloptions').removeClass('noscroll');\n            }, 100);\n        });\n        listenevents.push(thisevent);\n\n        // This will detect a change in orientation and retrigger centering.\n        thisevent = $(document).on('orientationchange', function() {\n            centerDialogue(dialogue);\n        });\n        listenevents.push(thisevent);\n\n        // Detect window resizes (most browsers).\n        thisevent = $(window).on('resize', function() {\n            centerDialogue(dialogue);\n        });\n        listenevents.push(thisevent);\n\n        // thisevent = container.on('keyup', function() {\n        //     console.log(\"Herreee\");\n        //     //checkOptions();\n        // });\n        // listenevents.push(thisevent);\n\n        thisevent = $(\".option\").on('keydown', function(e) {\n            var index = $(this).index();\n            var optionOuterWidth = $('.option').outerWidth();\n            var wrapperWidth = $('.alloptions').width();\n            var rowOptions = Math.floor(wrapperWidth / optionOuterWidth);\n            var totalOptions = options.length;\n            var totalRowsCount = Math.floor(options.length / rowOptions);\n            var indexRow = Math.ceil((index + 1) / rowOptions);\n\n            // Right key.\n            if (e.keyCode === 39) {\n                var nextIndex = index + 1;\n                if (typeof options[nextIndex] === 'undefined') {\n                    return;\n                }\n                moveToOption(options[index], options[nextIndex]);\n            }\n\n            // Left key.\n            if (e.keyCode === 37) {\n                var prevIndex = index - 1;\n                if (typeof options[prevIndex] === 'undefined') {\n                    return;\n                }\n                moveToOption(options[index], options[prevIndex]);\n            }\n\n            // down key.\n            if (e.keyCode === 40) {\n                // If the focus is on an element from the last visual row.\n                if (indexRow == totalRowsCount) {\n                    return;\n                }\n                var nextIndex = index + rowOptions;\n                if (typeof options[nextIndex] === 'undefined') {\n                    nextIndex = totalOptions - 1;\n                }\n                moveToOption(options[index], options[nextIndex]);\n            }\n\n            // up key.\n            if (e.keyCode === 38) {\n                // if the focus is on an element from the first visual row.\n                if (indexRow === 1) {\n                    return;\n                }\n                var prevIndex = index - rowOptions;\n                if (typeof options[prevIndex] === 'undefined') {\n                    prevIndex = 0;\n                }\n                moveToOption(options[index], options[prevIndex]);\n            }\n\n            // end key.\n            if (e.keyCode === 35) {\n                var lastOptionIndex = totalOptions - 1;\n                if (index === lastOptionIndex) {\n                    return;\n                }\n                moveToOption(options[index], options[lastOptionIndex]);\n            }\n\n            // home key.\n            if (e.keyCode === 36) {\n                var firstOptionIndex = 0;\n                if (index === firstOptionIndex) {\n                    return;\n                }\n                moveToOption(options[index], options[firstOptionIndex]);\n            }\n\n            if (e.keyCode === 13 || e.keyCode == 32) {\n                var actionElements = $(this).find('.actionelement');\n                // optionactions.each(function(index, optionaction) {\n                //     $($(optionaction).children()[0]).attr({'tabindex' : 0, 'aria-hidden' : 'false'});\n                // });\n                // var modinfo = $(this).find('.info i');\n                // //$(this).attr('tabindex', -1);\n                // $(modanchor).attr('tabindex', 0);\n                // $(modinfo).attr('tabindex', 0);\n                // $(modinfo).attr('aria-hidden', 'false');\n                // $(modanchor).focus();\n                 $(actionElements[0]).attr('tabindex', 0);\n                 $(actionElements[0]).focus();\n                 $(this).attr('tabindex', -1);\n            }\n        });\n        listenevents.push(thisevent);\n\n        thisevent = $(\".actionelement\").on('keydown', function(e) {\n             e.preventDefault();\n             e.stopPropagation();\n\n            var actionElements = $(this).closest(\"label\").find(\".actionelement\");\n            var index = $(actionElements).index(this);\n\n            // down key.\n            if (e.keyCode === 40 || e.keyCode === 39) {\n                var next = index + 1;\n                if (typeof actionElements[next] === 'undefined') {\n                    return;\n                }\n                var nextAction = actionElements[next];\n                $(nextAction).attr('tabindex', 0);\n                $(nextAction).focus();\n                $(this).attr('tabindex', -1);\n            }\n\n            // up key.\n            if (e.keyCode === 38 || e.keyCode === 37) {\n                var prev = index - 1;\n                if (typeof actionElements[prev] === 'undefined') {\n                    return;\n                }\n                var prevAction = actionElements[prev];\n                $(prevAction).attr('tabindex', 0);\n                $(prevAction).focus();\n                $(this).attr('tabindex', -1);\n            }\n\n            if (e.keyCode === 27) {\n                var optionElement = $(this).closest('.option');\n                $(optionElement).attr('tabindex', 0);\n                $(optionElement).focus();\n                $(this).attr('tabindex', -1);\n            }\n\n            if (e.keyCode === 13) {\n                if ($(this).hasClass('info')) {\n                    var typeSummaryEl = $(this).closest('label').find('.typesummary');\n                    openTypeSummary(typeSummaryEl);\n                }\n                return;\n            }\n        });\n        listenevents.push(thisevent);\n\n        // Hide will be managed by cancel_popup after restoring the body overflow.\n        // thisevent = bb.one('button.closebutton').on('click', function(e) {\n        //     cancelPopup(e);\n        // });\n        // listenevents.push(thisevent);\n\n        // Grab global keyup events and handle them\n        // thisevent = $(document).on('keydown', handleKeyPress(e));\n        // listenevents.push(thisevent);\n\n        // Display the panel\n        panel.show(e);\n\n        // Re-centre the dialogue after we've shown it.\n        centerDialogue(dialogue);\n\n        // Finally, focus the first radio element - this enables form selection via the keyboard.\n        container.find('.option input[type=radio]').focus();\n    };\n\n    return /** @alias module:core/activity_chooser_dialogue */{\n\n        /**\n         * Poll the server for any new notifications.\n         *\n         * @method fetchNotifications\n         */\n        setupChooserDialogue: setupChooserDialogue,\n\n        /**\n         * Add a notification to the page.\n         *\n         * Note: This does not cause the notification to be added to the session.\n         *\n         * @method addNotification\n         * @param {Object}  notification                The notification to add.\n         * @param {string}  notification.message        The body of the notification\n         * @param {string}  notification.type           The type of notification to add (error, warning, info, success).\n         * @param {Boolean} notification.closebutton    Whether to show the close button.\n         * @param {Boolean} notification.announce       Whether to announce to screen readers.\n         */\n        displayChooser: displayChooser,\n        updateHiddenRadioValue: updateHiddenRadioValue\n    };\n});\n"],"file":"activity_chooser_dialogue.min.js"}