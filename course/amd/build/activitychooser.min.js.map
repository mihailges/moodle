{"version":3,"sources":["../src/activitychooser.js"],"names":["init","courseid","pendingPromise","Pending","fetchModules","webserviceData","allSections","fetchSections","sectionIds","fetchSectionIds","builtModuleData","sectionIdMapper","modalMapper","modalMap","registerListenerEvents","enableInteraction","resolve","init2","courseId","registerEventHandlers","fetchModuleDataFunction","innerPromise","Promise","Repository","activityModules","data","events","CustomEvents","activate","keyboardActivate","define","document","forEach","event","addEventListener","e","target","closest","selectors","elements","sectionmodchooser","caller","sectionid","dataset","data2","ChooserDialogue","displayChooser","sections","querySelectorAll","section","siteTopic","sitetopic","siteMenu","sitemenu","Array","from","map","button","querySelector","webServiceData","id","newData","JSON","parse","stringify","allmodules","module","urls","addoption","templateData","templateDataBuilder","buildModal","ModalFactory","create","type","types","DEFAULT","title","body","Templates","render","large","templateContext","classes","modulesMap","modal","get","disabled"],"mappings":"qXAwBA,OACA,OACA,OACA,OACA,OACA,OAEA,O,2gCAQO,GAAMA,CAAAA,CAAI,4CAAG,WAAMC,CAAN,mGAEZC,CAFY,CAEK,GAAIC,UAFT,gBAKaC,CAAAA,CAAY,CAACH,CAAD,CALzB,QAKVI,CALU,QAOVC,CAPU,CAOIC,CAAa,EAPjB,CASVC,CATU,CASGC,CAAe,CAACH,CAAD,CATlB,CAWVI,CAXU,CAWQC,CAAe,CAACN,CAAD,CAAiBG,CAAjB,CAXvB,gBAaOI,CAAAA,CAAW,CAACF,CAAD,CAblB,QAaVG,CAbU,QAgBhBC,CAAsB,CAACD,CAAD,CAAWH,CAAX,CAAtB,CAEAK,CAAiB,CAACT,CAAD,CAAjB,CAGAJ,CAAc,CAACc,OAAf,GArBgB,yCAAH,uDAAV,C,SAwBA,GAAMC,CAAAA,CAAK,CAAG,SAAAC,CAAQ,CAAI,CAC7B,GAAMhB,CAAAA,CAAc,CAAG,GAAIC,UAA3B,CAEAgB,CAAqB,CAACC,CAAuB,CAACF,CAAD,CAAxB,CAArB,CAEAhB,CAAc,CAACc,OAAf,EACH,CANM,C,aAQDI,CAAAA,CAAuB,CAAG,SAAAF,CAAQ,CAAI,CACxC,GAAIG,CAAAA,CAAY,CAAG,IAAnB,CAEA,MAAO,WAAM,CACT,GAAI,CAACA,CAAL,CAAmB,CACfA,CAAY,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAACN,CAAD,CAAa,CACpCA,CAAO,CAACO,CAAU,CAACC,eAAX,CAA2BN,CAA3B,CAAD,CACV,CAFc,CAGlB,CAED,MAAOG,CAAAA,CACV,CACJ,C,CACKF,CAAqB,CAAG,SAACM,CAAD,CAAU,CACpC,GAAMC,CAAAA,CAAM,CAAG,CACX,OADW,CAEXC,UAAaD,MAAb,CAAoBE,QAFT,CAGXD,UAAaD,MAAb,CAAoBG,gBAHT,CAAf,CAMAF,UAAaG,MAAb,CAAoBC,QAApB,CAA8BL,CAA9B,EAGAA,CAAM,CAACM,OAAP,CAAe,SAACC,CAAD,CAAW,CACtBF,QAAQ,CAACG,gBAAT,CAA0BD,CAA1B,4CAAiC,WAAME,CAAN,qGACzBA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,UAAUC,QAAV,CAAmBC,iBAApC,CADyB,kBAEnBC,CAFmB,CAEVN,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,UAAUC,QAAV,CAAmBC,iBAApC,CAFU,CAGnBE,CAHmB,CAGPD,CAAM,CAACE,OAAP,CAAeD,SAHR,gBAKLjB,CAAAA,CAAI,EALC,QAKnBmB,CALmB,QAOnBlC,CAPmB,CAODC,CAAe,CAACiC,CAAD,CAAQF,CAAR,CAPd,gBASF9B,CAAAA,CAAW,CAACF,CAAD,CATT,QASnBG,CATmB,QAWzBgC,CAAe,CAACC,cAAhB,CAA+BL,CAA/B,CAAuC5B,CAAvC,CAAiDH,CAAjD,EAXyB,yCAAjC,wDAcH,CAfD,CAgBH,C,CAQKN,CAAY,4CAAG,WAAMH,CAAN,kGAAwBsB,CAAAA,CAAU,CAACC,eAAX,CAA2BvB,CAA3B,CAAxB,iFAAH,uD,CAQZM,CAAa,CAAG,UAAM,IAClBwC,CAAAA,CAAQ,CAAGhB,QAAQ,CAACiB,gBAAT,WAA6BV,UAAUC,QAAV,CAAmBU,OAAhD,sBADO,CAElBC,CAAS,CAAGnB,QAAQ,CAACiB,gBAAT,CAA0BV,UAAUC,QAAV,CAAmBY,SAA7C,CAFM,CAGlBC,CAAQ,CAAGrB,QAAQ,CAACiB,gBAAT,CAA0BV,UAAUC,QAAV,CAAmBc,QAA7C,CAHO,CAKxB,kBAAWN,CAAX,IAAwBG,CAAxB,IAAsCE,CAAtC,EACH,C,CASK3C,CAAe,CAAG,SAACsC,CAAD,CAAc,CAClC,MAAOO,CAAAA,KAAK,CAACC,IAAN,CAAWR,CAAX,EAAqBS,GAArB,CAAyB,SAACP,CAAD,CAAa,CACzC,GAAMQ,CAAAA,CAAM,CAAGR,CAAO,CAACS,aAAR,WAAyBpB,UAAUC,QAAV,CAAmBC,iBAA5C,EAAf,CACA,MAAOiB,CAAAA,CAAM,CAACd,OAAP,CAAeD,SAAf,CAA2Be,CAAM,CAACd,OAAP,CAAeD,SAA1C,OACV,CAHM,CAIV,C,CAWK/B,CAAe,CAAG,SAACgD,CAAD,CAAiBC,CAAjB,CAAwB,CAE5C,GAAMC,CAAAA,CAAO,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,CAAf,CAAX,CAAhB,CACAE,CAAO,CAACI,UAAR,CAAmBjC,OAAnB,CAA2B,SAACkC,CAAD,CAAY,CACnCA,CAAM,CAACC,IAAP,CAAYC,SAAZ,EAAyB,YAAcR,CAC1C,CAFD,EAGA,MAAOC,CAAAA,CAAO,CAACI,UAClB,C,CASKrD,CAAW,4CAAG,WAAMF,CAAN,yFAEV2D,CAFU,CAEKC,CAAmB,CAAC5D,CAAD,CAFxB,gBAIH6D,CAAAA,CAAU,CAACF,CAAD,CAJP,iFAAH,uD,CAcXC,CAAmB,CAAG,SAAC7C,CAAD,CAAU,CAQlC,MAHkB,CACd,QAAWA,CADG,CAIrB,C,CASK8C,CAAU,4CAAG,WAAM9C,CAAN,4GACR+C,CAAY,CAACC,MAAb,CAAoB,CACvBC,IAAI,CAAEF,CAAY,CAACG,KAAb,CAAmBC,OADF,CAEvBC,KAAK,CAAE,iBAAU,uBAAV,CAFgB,CAGvBC,IAAI,CAAEC,CAAS,CAACC,MAAV,CAAiB,qBAAjB,CAAwCvD,CAAxC,CAHiB,CAIvBwD,KAAK,GAJkB,CAKvBC,eAAe,CAAE,CACbC,OAAO,CAAE,YADI,CALM,CAApB,CADQ,0CAAH,uD,CAoBVrE,CAAsB,CAAG,SAACD,CAAD,CAAWuE,CAAX,CAA0B,CACrD,GAAM1D,CAAAA,CAAM,CAAG,CACX,OADW,CAEXC,UAAaD,MAAb,CAAoBE,QAFT,CAGXD,UAAaD,MAAb,CAAoBG,gBAHT,CAAf,CAMAF,UAAaG,MAAb,CAAoBC,QAApB,CAA8BL,CAA9B,EAGAA,CAAM,CAACM,OAAP,CAAe,SAACC,CAAD,CAAW,CACtBF,QAAQ,CAACG,gBAAT,CAA0BD,CAA1B,CAAiC,SAACE,CAAD,CAAO,CACpC,GAAIA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,UAAUC,QAAV,CAAmBC,iBAApC,CAAJ,CAA4D,IAClDC,CAAAA,CAAM,CAAGN,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBC,UAAUC,QAAV,CAAmBC,iBAApC,CADyC,CAElDE,CAAS,CAAGD,CAAM,CAACE,OAAP,CAAeD,SAFuB,CAGlD2C,CAAK,CAAGxE,CAAQ,CAACyE,GAAT,CAAa5C,CAAb,CAH0C,CAIxDG,CAAe,CAACC,cAAhB,CAA+BL,CAA/B,CAAuC4C,CAAvC,CAA8CD,CAAU,CAACE,GAAX,CAAe5C,CAAf,CAA9C,CACH,CACJ,CAPD,CAQH,CATD,CAUH,C,CASK3B,CAAiB,CAAG,SAACgC,CAAD,CAAc,CACpCO,KAAK,CAACC,IAAN,CAAWR,CAAX,EAAqBS,GAArB,CAAyB,SAACP,CAAD,CAAa,CAClC,GAAMQ,CAAAA,CAAM,CAAGR,CAAO,CAACS,aAAR,CAAsBpB,UAAUC,QAAV,CAAmBC,iBAAzC,CAAf,CACAiB,CAAM,CAAC8B,QAAP,GACH,CAHD,CAIH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/activitychooser\n * @package    core_course\n * @copyright  2020 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ChooserDialogue from 'core_course/local/chooser/dialogue';\nimport CustomEvents from 'core/custom_interaction_events';\nimport * as Repository from 'core_course/local/chooser/repository';\nimport selectors from 'core_course/local/chooser/selectors';\nimport * as Templates from 'core/templates';\nimport * as ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {Number} courseid Course ID to use later on in fetchModules()\n */\nexport const init = async(courseid) => {\n    // Add a deferred promise, mainly for Behat purposes.\n    let pendingPromise = new Pending();\n\n    // Fetch all the modules available for a given course.\n    const webserviceData = await fetchModules(courseid);\n\n    const allSections = fetchSections();\n\n    const sectionIds = fetchSectionIds(allSections);\n\n    const builtModuleData = sectionIdMapper(webserviceData, sectionIds);\n\n    const modalMap = await modalMapper(builtModuleData);\n\n    // User interaction handlers.\n    registerListenerEvents(modalMap, builtModuleData);\n\n    enableInteraction(allSections);\n\n    // All of our base setup is done, let's call it done.\n    pendingPromise.resolve();\n};\n\nexport const init2 = courseId => {\n    const pendingPromise = new Pending();\n\n    registerEventHandlers(fetchModuleDataFunction(courseId));\n\n    pendingPromise.resolve();\n};\n\nconst fetchModuleDataFunction = courseId => {\n    let innerPromise = null;\n\n    return () => {\n        if (!innerPromise) {\n            innerPromise = new Promise((resolve) => {\n                resolve(Repository.activityModules(courseId));\n            });\n        }\n\n        return innerPromise;\n    };\n};\nconst registerEventHandlers = (data) => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    CustomEvents.define(document, events);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n        document.addEventListener(event, async(e) => {\n            if (e.target.closest(selectors.elements.sectionmodchooser)) {\n                const caller = e.target.closest(selectors.elements.sectionmodchooser);\n                const sectionid = caller.dataset.sectionid;\n\n                const data2 = await data();\n\n                const builtModuleData = sectionIdMapper(data2, sectionid);\n\n                const modalMap = await modalMapper(builtModuleData);\n\n                ChooserDialogue.displayChooser(caller, modalMap, builtModuleData);\n            }\n        });\n    });\n};\n/**\n * Call the activity webservice so we get an array of modules\n *\n * @method fetchModules\n * @param {Number} courseid Course ID for the course we want modules for\n * @return {Object} The result of the Web service\n */\nconst fetchModules = async courseid => await Repository.activityModules(courseid);\n\n/**\n * Find all the sections on a page\n *\n * @method fetchModules\n * @return {Array} The result of querySelectors that have been spread into a array\n */\nconst fetchSections = () => {\n    const sections = document.querySelectorAll(`${selectors.elements.section}[role=\"region\"]`);\n    const siteTopic = document.querySelectorAll(selectors.elements.sitetopic);\n    const siteMenu = document.querySelectorAll(selectors.elements.sitemenu);\n\n    return [...sections, ...siteTopic, ...siteMenu];\n};\n\n/**\n * Given a NodeList of HTMLElement nodes find their ID's\n *\n * @method fetchSectionIds\n * @param {Array} sections The sections to fetch ID's for\n * @return {Array} Array of section ID's we'll use for maps\n */\nconst fetchSectionIds = (sections) => {\n    return Array.from(sections).map((section) => {\n        const button = section.querySelector(`${selectors.elements.sectionmodchooser}`);\n        return button.dataset.sectionid ? button.dataset.sectionid : undefined;\n    });\n};\n\n/**\n * Given the web service data and an array of section ID's we want to make deep copies\n * of the WS data then add on the section ID to the addoption URL\n *\n * @method sectionIdMapper\n * @param {Object} webServiceData Our original data from the Web service call\n * @param {Array} sectionIds All of the sections we need to build modal data for\n * @return {Map} A map of K: sectionID V: [modules] with URL's built\n */\nconst sectionIdMapper = (webServiceData, id) => {\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\n    const newData = JSON.parse(JSON.stringify(webServiceData));\n    newData.allmodules.forEach((module) => {\n        module.urls.addoption += '&section=' + id;\n    });\n    return newData.allmodules;\n};\n\n/**\n * Build a modal for each section ID and store it into a map for quick access\n *\n * @method modalMapper\n * @param {Map} builtModuleData our map of section ID's & modules to generate modals for\n * @return {Map} A map of K: sectionID V: {Modal} with the modal being prebuilt\n */\nconst modalMapper = async(builtModuleData) => {\n    // Run a call off to a new func for filtering favs & recommended.\n    const templateData = templateDataBuilder(builtModuleData);\n\n    return await buildModal(templateData);\n};\n\n/**\n * Given an array of modules we want to figure out where & how to place them into our template object\n *\n * @method templateDataBuilder\n * @param {Array} data our modules to manipulate into a Templatable object\n * @return {Object} Our built object ready to render out\n */\nconst templateDataBuilder = (data) => {\n    // const recommended = data.filter(mod => mod.recommended === true);\n    // const favourites = data.filter(mod => mod.favourite === true);\n    // Switching for the active tab.\n    // foo ? foo : bar\n    const builtData = {\n        'default': data,\n    };\n    return builtData;\n};\n\n/**\n * Given an object we want to prebuild a modal ready to store into a map\n *\n * @method buildModal\n * @param {Object} data The template data which contains arrays of modules\n * @return {Object} The modal for the calling section with everything already set up\n */\nconst buildModal = async(data) => {\n    return ModalFactory.create({\n        type: ModalFactory.types.DEFAULT,\n        title: getString('addresourceoractivity'),\n        body: Templates.render('core_course/chooser', data),\n        large: true,\n        templateContext: {\n            classes: 'modchooser'\n        }\n    });\n};\n\n/**\n * Now all of our setup is done we want to ensure a user can actually select a section to add a module to\n * Once a selection has been made pick out the modal & module information and pass it along\n *\n * @method registerListenerEvents\n * @param {Map} modalMap The map of modals ready to pick from when a user clicks 'Add activity'\n * @param {Map} modulesMap The map of K: sectionID V: [modules] we need to pass along so we can fetch a specific modules data\n */\nconst registerListenerEvents = (modalMap, modulesMap) => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    CustomEvents.define(document, events);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n        document.addEventListener(event, (e) => {\n            if (e.target.closest(selectors.elements.sectionmodchooser)) {\n                const caller = e.target.closest(selectors.elements.sectionmodchooser);\n                const sectionid = caller.dataset.sectionid;\n                const modal = modalMap.get(sectionid);\n                ChooserDialogue.displayChooser(caller, modal, modulesMap.get(sectionid));\n            }\n        });\n    });\n};\n\n/**\n * We run this last in the file as this will now allow users to select a section to add a module to\n * The assumption is that everything is set up and ready to go\n *\n * @method enableInteraction\n * @param {Array} sections The sections we need to find buttons in so we can enable the button\n */\nconst enableInteraction = (sections) => {\n    Array.from(sections).map((section) => {\n        const button = section.querySelector(selectors.elements.sectionmodchooser);\n        button.disabled = false;\n    });\n};\n"],"file":"activitychooser.min.js"}