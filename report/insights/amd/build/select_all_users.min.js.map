{"version":3,"sources":["../src/select_all_users.js"],"names":["SELECTORS","CONTAINERS","SELECTED_PREDICTIONS_INFO","ACTIONS","SELECT_ALL_EXISTING","CLEAR_ALL","selectedPredictions","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","handleCheckboxToggle","document","addEventListener","e","target","matches","selectedPredictionsInfo","querySelector","allPredictions","JSON","parse","dataset","allpredictionids","togglegroup","templateData","totalpredictions","length","togglegroupname","renderNotification","checkboxToggleGroup","setGroupState","clearNotification","predictionIds","checkedSlaves","slaves","$","each","index","checkedSlave","predictionId","val","push","toggleGroupName","selectedpredictionscount","templateName","selectedInsightsContainer","Templates","renderForPromise","html","js","replaceNodeContents","innerHTML","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @module     report_insights/select_all_users\n * @package    report_insights\n * @copyright  2020 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    CONTAINERS: {\n        SELECTED_PREDICTIONS_INFO: '[data-region=\"selected-predictions-info\"]'\n    },\n    ACTIONS: {\n        SELECT_ALL_EXISTING: '[data-action=\"select-all-existing\"]',\n        CLEAR_ALL: '[data-action=\"clear-all-selected\"]',\n    }\n};\n\nexport let selectedPredictions;\n\nconst registerListenerEvents = () => {\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, (data) => {\n        handleCheckboxToggle(data);\n    });\n\n    document.addEventListener('click',(e) => {\n        if (e.target.matches(SELECTORS.ACTIONS.SELECT_ALL_EXISTING)) { // All existing insights are selected.\n            const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n            const allPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n            selectedPredictions[e.target.dataset.togglegroup] = allPredictions;\n\n            const templateData = {\n                totalpredictions: allPredictions.length,\n                togglegroupname:  e.target.dataset.togglegroup\n            };\n\n            renderNotification('report_insights/all_existing_insights_selected', templateData);\n        }\n\n        if (e.target.matches(SELECTORS.ACTIONS.CLEAR_ALL)) { // Insight selection is cleared.\n            const checkboxToggleGroup = e.target.dataset.togglegroup;\n            CheckboxToggleAll.setGroupState(document, checkboxToggleGroup, false);\n            selectedPredictions = [];\n\n            clearNotification();\n        }\n    });\n};\n\nconst handleCheckboxToggle = (data) => {\n    selectedPredictions = [];\n    let predictionIds = [];\n    const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n    const allPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n    const checkedSlaves = data.checkedSlaves;\n    const slaves = data.slaves;\n\n    if (checkedSlaves.length > 0) {\n        $.each(data.checkedSlaves, (index, checkedSlave) => {\n            const predictionId = $(checkedSlave).val();\n            predictionIds.push(predictionId);\n        });\n\n        selectedPredictions[data.toggleGroupName] = predictionIds;\n\n        // If all insights are selected on the given page and there are more available to be selected,\n        // provide an option for bulk selecting all existing insights.\n        if (slaves.length === checkedSlaves.length && allPredictions.length > slaves.length) {\n            const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n            const allPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n\n            const templateData = {\n                selectedpredictionscount: data.checkedSlaves.length,\n                totalpredictions: allPredictions.length,\n                togglegroupname: data.toggleGroupName\n            };\n\n            renderNotification('report_insights/all_insights_on_page_selected', templateData);\n        } else { // Either some insights are selected or all existing insights are already selected.\n            // Clear any previous notifications.\n            clearNotification();\n        }\n    } else { // No insights selected.\n        // Clear any previous notifications.\n        clearNotification();\n    }\n};\n\nconst renderNotification = async (templateName, templateData) => {\n    const selectedInsightsContainer = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n    const {html, js} = await Templates.renderForPromise(templateName, templateData);\n    await Templates.replaceNodeContents(selectedInsightsContainer, html, js);\n};\n\nconst clearNotification = () => {\n    document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO).innerHTML = '';\n};\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method init\n * @param {Number} courseid What course to fetch the data for\n * @param {Number} sectionid What section to fetch the data for\n * @return {object} jQuery promise\n */\nexport const init = () => {\n    registerListenerEvents();\n};\n"],"file":"select_all_users.min.js"}