{"version":3,"sources":["../src/insight_selection.js"],"names":["Actions","selectAll","clearAll","getSelectors","toggleGroup","containers","insightSelection","insightSelectionInfoSpan","insightSelectionActionsList","elements","insightSlaveCheckbox","actionToggle","selectAllInsights","clearSelectedInsights","getUniqueId","insightSelectionContainer","document","querySelector","dataset","uniqueid","setSelectedInsights","selectedInsights","LocalStorage","set","JSON","stringify","getSelectedInsights","parse","get","getAllInsights","allinsights","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","toggleGroupName","handleInsightToggle","addEventListener","e","target","matches","preventDefault","allInsights","setGroupState","renderInsightSelectionState","checkedInsightsOnPage","checkedSlaves","toArray","insightsOnPage","slaves","$","each","index","insight","insightId","parseInt","val","isSelected","indexOf","wasSelected","length","push","splice","renderInsightSelectionInfo","renderInsightSelectionActionsList","actions","action","togglegroup","text","unshift","Templates","renderForPromise","html","js","replaceNodeContents","insightSelectionInfoSpanElements","querySelectorAll","strData","nselected","ntotal","forEach","insightSelectionInfoSpanElement","innerHTML","setStateOnInit","insightCheckboxElements","actionToggleElements","actionToggleElement","removeAttribute","insightCheckboxElement","value","checked","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module that enables selection of insights across different pages and also bulk selection of all existing insights.\n *\n * @module     report_insights/insight_selection\n * @package    report_insights\n * @copyright  2020 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport LocalStorage from 'core/localstorage';\n\nconst Actions = {\n    selectAll: 'select-all',\n    clearAll: 'clear-selection'\n};\n\n/**\n * Method that returns the selectors in the given toggle group.\n *\n * @method getSelectors\n * @return {Object}\n */\nconst getSelectors = (toggleGroup) => {\n    return {\n        containers: {\n            insightSelection: `[data-region=\"insight-selection\"][data-togglegroup=\"${toggleGroup}\"]`,\n            get insightSelectionInfoSpan() {\n                return `${this.insightSelection} [data-region=\"insight-selection-info\"] span`;\n            },\n            get insightSelectionActionsList() {\n                return `${this.insightSelection} [data-region=\"insight-selection-actions\"] ul`;\n            }\n        },\n        elements: {\n            insightSlaveCheckbox: `input[type=\"checkbox\"][data-toggle=\"slave\"][data-togglegroup=\"${toggleGroup}\"]`,\n            actionToggle: `[data-toggle=\"action\"][data-action=\"toggle\"][data-togglegroup=\"${toggleGroup}\"]`,\n            selectAllInsights: `[data-toggle=\"action\"][data-action=\"${Actions.selectAll}\"][data-togglegroup=\"${toggleGroup}\"]`,\n            clearSelectedInsights: `[data-toggle=\"action\"][data-action=\"${Actions.clearAll}\"][data-togglegroup=\"${toggleGroup}\"]`,\n        }\n    };\n};\n\n/**\n * Method that returns the insight selection unique ID.\n *\n * @method getUniqueId\n * @param {String} toggleGroup The name of the toggle group\n */\nconst getUniqueId = (toggleGroup) => {\n    const insightSelectionContainer = document.querySelector(getSelectors(toggleGroup).containers.insightSelection);\n    return `${insightSelectionContainer.dataset.uniqueid}`;\n};\n\n/**\n * Stores the IDs of the selected insights in the local storage.\n *\n * @method setSelectedInsights\n * @param {Array} selectedInsights The array containing the IDs of the selected insights\n * @param {String} toggleGroup The name of the toggle group\n */\nexport const setSelectedInsights = (selectedInsights, toggleGroup) => {\n    LocalStorage.set(getUniqueId(toggleGroup), JSON.stringify(selectedInsights));\n};\n\n/**\n * Fetches all selected insights from the local storage and returns an array containing the IDs of the insights.\n *\n * @method getSelectedInsights\n * @param {String} toggleGroup The name of the toggle group\n * @return {Array}\n */\nexport const getSelectedInsights = (toggleGroup) => {\n    const selectedInsights = JSON.parse(LocalStorage.get(getUniqueId(toggleGroup)));\n    return selectedInsights ? selectedInsights : [];\n};\n\n/**\n * Returns an array containing the IDs of all existing insights.\n *\n * @method getAllInsights\n * @param {String} toggleGroup The name of the toggle group\n * @return {Array}\n */\nconst getAllInsights = (toggleGroup) => {\n    const insightSelectionContainer = document.querySelector(getSelectors(toggleGroup).containers.insightSelection);\n    return JSON.parse(insightSelectionContainer.dataset.allinsights);\n};\n\n/**\n * Register insight selection related event listeners.\n *\n * @method registerListenerEvents\n * @param {String} toggleGroup The name of the toggle group\n */\nconst registerListenerEvents = (toggleGroup) => {\n    // Subscribe to the 'checkboxToggled' event.\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, (data) => {\n        // If the captured event is related to the given toggle group, handle the event data.\n        if (data.toggleGroupName === toggleGroup) {\n            handleInsightToggle(data);\n        }\n    });\n\n    document.addEventListener('click', async (e) => {\n        // All existing insights are selected.\n        if (e.target.matches(getSelectors(toggleGroup).elements.selectAllInsights)) {\n            e.preventDefault();\n            const allInsights = getAllInsights(toggleGroup);\n            // Set all existing insights from a given toggle group as selected.\n            setSelectedInsights(allInsights, toggleGroup);\n            // Check all insight checkboxes on the page from a given toggle group.\n            CheckboxToggleAll.setGroupState(document, toggleGroup, true);\n\n            renderInsightSelectionState(allInsights, toggleGroup);\n        }\n\n        // Insight selection is cleared.\n        if (e.target.matches(getSelectors(toggleGroup).elements.clearSelectedInsights)) {\n            e.preventDefault();\n            // Reset all selected insights.\n            setSelectedInsights([], toggleGroup);\n            // Uncheck all insight checkboxes on the page from a given toggle group.\n            CheckboxToggleAll.setGroupState(document, toggleGroup, false);\n\n            renderInsightSelectionState([], toggleGroup);\n        }\n    });\n};\n\n/**\n * Method that handles the change of state of the insight selection based on the data returned by the\n * 'checkboxToggled' event.\n *\n * @method handleInsightToggle\n * @param {Object} data The data returned by the 'checkboxToggled' event\n */\nconst handleInsightToggle = (data) => {\n    // Array containing all currently checked insight (slave) checkbox elements on the page.\n    const checkedInsightsOnPage = data.checkedSlaves.toArray();\n    // Array containing all insight (slave) checkbox elements on the current page.\n    const insightsOnPage = data.slaves.toArray();\n    // Get all previously selected insight in the given toggle group.\n    let selectedInsights = getSelectedInsights(data.toggleGroupName);\n\n    // Loop through each insight checkbox element on the current page.\n    $.each(insightsOnPage, (index, insight) => {\n        const insightId = parseInt($(insight).val());\n        // Whether the current insight checkbox element is currently selected.\n        const isSelected = checkedInsightsOnPage.indexOf(insight) > -1;\n        // Whether the current insight checkbox element was previously selected.\n        const wasSelected = selectedInsights.length > 0 &&\n            selectedInsights.indexOf(insightId) > -1;\n\n        if (isSelected && !wasSelected) { // The insight checkbox element is selected and was not previously.\n            // The current insight was selected in the latest change of state, therefore add the current insight\n            // to the selected insights.\n            selectedInsights.push(insightId);\n        } else if (!isSelected && wasSelected) { // The insights checkbox element is not selected and it was previously.\n            // The current insights was unselected in the latest change of state, therefore remove the current\n            // insight from the selected insights.\n            selectedInsights.splice(selectedInsights.indexOf(insightId), 1);\n        }\n    });\n\n    setSelectedInsights(selectedInsights, data.toggleGroupName);\n\n    renderInsightSelectionState(selectedInsights, data.toggleGroupName);\n};\n\n/**\n * Method that renders the current insight selection state.\n *\n * @method renderInsightSelectionState\n * @param {Array} selectedInsights The array containing the IDs of the selected insights\n * @param {String} toggleGroup The name of the toggle group\n */\nconst renderInsightSelectionState = (selectedInsights, toggleGroup) => {\n    renderInsightSelectionInfo(selectedInsights, toggleGroup);\n    // If the insight selection actions element is present, render the proper actions list.\n    if (document.querySelector(getSelectors(toggleGroup).containers.insightSelectionActionsList)) {\n        renderInsightSelectionActionsList(selectedInsights, toggleGroup);\n    }\n};\n\n/**\n * Method that renders the proper actions list depending on the selected insights.\n *\n * @method renderInsightSelectionActionsList\n * @param {Array} selectedInsights The array containing the IDs of the selected insights\n * @param {String} toggleGroup The name of the toggle group\n */\nconst renderInsightSelectionActionsList = async (selectedInsights, toggleGroup) => {\n    let actions = [];\n    // Get the IDs of all existing insights.\n    const allInsights = getAllInsights(toggleGroup);\n\n    if (selectedInsights.length > 0) { // There is at least one selected insight.\n        // Display the 'Clear all' option in the actions list.\n        actions.push({\n            action: Actions.clearAll,\n            togglegroup: toggleGroup,\n            text: await getString('clearselection', 'report_insights')\n        });\n\n        if (selectedInsights.length !== allInsights.length) { // There are still some unselected insights.\n            // Display the 'Select all' option in the actions list.\n            actions.unshift({\n                action: Actions.selectAll,\n                togglegroup: toggleGroup,\n                text: await getString('selectall', 'core', allInsights.length)\n            });\n        }\n    } else { // There aren't any selected insights.\n        // Display the 'Select all' option in the actions list.\n        actions.push({\n            action: Actions.selectAll,\n            togglegroup: toggleGroup,\n            text: await getString('selectall', 'core', allInsights.length)\n        });\n    }\n\n    const {html, js} = await Templates.renderForPromise('report_insights/insight_selection_actions_list',\n        {actions: actions});\n    await Templates.replaceNodeContents(getSelectors(toggleGroup).containers.insightSelectionActionsList, html, js);\n};\n\n/**\n * Method that renders the insight selection info.\n *\n * @method renderInsightSelectionInfo\n * @param {Array} selectedInsights The array containing the IDs of the selected insights\n * @param {String} toggleGroup The name of the toggle group\n */\nconst renderInsightSelectionInfo = (selectedInsights, toggleGroup) => {\n    const allInsights = getAllInsights(toggleGroup);\n    const insightSelectionInfoSpanElements = document.querySelectorAll(\n        getSelectors(toggleGroup).containers.insightSelectionInfoSpan);\n    const strData = {\n        nselected: selectedInsights.length,\n        ntotal: allInsights.length\n    };\n\n    insightSelectionInfoSpanElements.forEach(async (insightSelectionInfoSpanElement) => {\n        insightSelectionInfoSpanElement.innerHTML = await getString('insightsselected', 'report_insights', strData);\n    });\n};\n\n/**\n * Method that pre-sets the state of the insight selection elements on page init.\n *\n * @method setStateOnInit\n * @param {String} toggleGroup The name of the toggle group\n */\nconst setStateOnInit = (toggleGroup) => {\n    // Get all selected insights in the given toggle group.\n    const selectedInsights = getSelectedInsights(toggleGroup);\n    // Get all insight (slave) checkbox elements on the current page.\n    const insightCheckboxElements = document.querySelectorAll(getSelectors(toggleGroup).elements.insightSlaveCheckbox);\n\n    // If at least one insight has been selected in the given toggle group, enable every existing action element\n    // related to that toggle group.\n    if (selectedInsights.length > 0) {\n        const actionToggleElements = document.querySelectorAll(getSelectors(toggleGroup).elements.actionToggle);\n        actionToggleElements.forEach(actionToggleElement => {\n            actionToggleElement.removeAttribute('disabled');\n        });\n    }\n\n    // Loop through each insight (slave) checkbox element from the current page.\n    insightCheckboxElements.forEach(insightCheckboxElement => {\n        const insightId = parseInt(insightCheckboxElement.value);\n        if (selectedInsights.indexOf(insightId) > -1) {\n            insightCheckboxElement.checked = true;\n        }\n    });\n\n    renderInsightSelectionState(selectedInsights, toggleGroup);\n};\n\n/**\n * Set up the actions.\n *\n * @param {String} toggleGroup The name of the toggle group\n * @method init\n */\nexport const init = (toggleGroup) => {\n    setStateOnInit(toggleGroup);\n    registerListenerEvents(toggleGroup);\n};\n"],"file":"insight_selection.min.js"}