{"version":3,"sources":["../src/select_all_users.js"],"names":["SELECTORS","CONTAINERS","SELECTED_PREDICTIONS_INFO","PREDICTIONS_TABLE","PREDICTIONS_TABLE_ROW","PREDICTIONS_INPUT_CHECKBOX","ACTIONS","SELECT_ALL_EXISTING","CLEAR_ALL","NONESELECTED","selectedPredictions","selectedStatus","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","handleCheckboxToggle","document","addEventListener","e","templateData","target","matches","selectedPredictionsInfo","querySelector","JSON","parse","dataset","allpredictionids","total","renderNotification","checkedSlaves","length","$","each","index","checkedSlave","predictionId","closest","console","log","push","slaves","selectednumber","templateName","selectedInsightsContainer","Templates","renderForPromise","html","js","replaceNodeContents","innerHTML","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @module     report_insights/select_all_users\n * @package    report_insights\n * @copyright  2020 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    CONTAINERS: {\n        SELECTED_PREDICTIONS_INFO: '[data-region=\"selected-predictions-info\"]',\n        PREDICTIONS_TABLE: '.insights-list',\n        PREDICTIONS_TABLE_ROW: 'tr[data-prediction-id]',\n        PREDICTIONS_INPUT_CHECKBOX: '.insight-checkbox-cell input[type=\"checkbox\"]'\n    },\n    ACTIONS: {\n        SELECT_ALL_EXISTING: '[data-action=\"select-all-existing\"]',\n        CLEAR_ALL: '[data-action=\"clear-all-selected\"]',\n    }\n};\n\nexport const NONESELECTED = 0;\nexport const PARTIALLYSELECTED = 1;\nexport const ALLONPAGESELECTED = 2;\nexport const ALLEXISTINGSELECTED = 3;\n\nexport let selectedPredictions;\nexport let selectedStatus = NONESELECTED;\n\nconst registerListenerEvents = () => {\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, (data) => {\n        handleCheckboxToggle(data);\n    });\n\n    document.addEventListener('click',(e) => {\n        let templateData = {};\n\n        if (e.target.matches(SELECTORS.ACTIONS.SELECT_ALL_EXISTING)) {\n            const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n            selectedPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n            selectedStatus = ALLEXISTINGSELECTED;\n\n            templateData = {\n                total: 1000\n            };\n            renderNotification(templateData);\n        }\n\n        if (e.target.matches(SELECTORS.ACTIONS.CLEAR_ALL)) {\n            selectedPredictions = [];\n            selectedStatus = NONESELECTED;\n            renderNotification(templateData);\n        }\n    });\n};\n\nconst handleCheckboxToggle = (data) => {\n    let templateData = {};\n\n    if (data.checkedSlaves.length == 0) {\n        selectedStatus = NONESELECTED;\n        selectedPredictions = [];\n    } else {\n        selectedPredictions = [];\n        $.each(data.checkedSlaves, (index, checkedSlave) => {\n            const predictionId = $(checkedSlave).closest(SELECTORS.CONTAINERS.PREDICTIONS_TABLE_ROW).data('prediction-id');\n            console.log(predictionId);\n            selectedPredictions.push(predictionId);\n        });\n        console.log(selectedPredictions);\n\n        if (data.slaves.length == data.checkedSlaves.length) {\n            selectedStatus = ALLONPAGESELECTED;\n            templateData = {\n                selectednumber: data.checkedSlaves.length,\n                total: 1000\n            };\n        } else {\n            selectedStatus = PARTIALLYSELECTED;\n            templateData = {\n                selectednumber: data.checkedSlaves.length,\n            };\n        }\n    }\n\n    renderNotification(templateData);\n};\n\n\nconst renderNotification = async (templateData) => {\n    let templateName;\n\n    console.log(selectedPredictions);\n\n    switch (selectedStatus) {\n        case PARTIALLYSELECTED:\n            templateName = 'report_insights/insights_partially_selected';\n            break;\n        case ALLONPAGESELECTED:\n            templateName = 'report_insights/all_insights_on_page_selected';\n            break;\n        case ALLEXISTINGSELECTED:\n            templateName = 'report_insights/all_existing_insights_selected';\n            break;\n        default:\n            templateName = '';\n    }\n\n    const selectedInsightsContainer = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n\n    if (templateName.length > 0) {\n        const {html, js} = await Templates.renderForPromise(templateName, templateData);\n        await Templates.replaceNodeContents(selectedInsightsContainer, html, js);\n    } else {\n        selectedInsightsContainer.innerHTML = '';\n        // TODO: Uncheck checkboxes after 'Clear all selected' action.\n        // const insightsTable = document.querySelector(SELECTORS.CONTAINERS.PREDICTIONS_TABLE);\n        // const checkboxToggleGroup = document.querySelectorAll(SELECTORS.CONTAINERS.PREDICTIONS_INPUT_CHECKBOX)[0].dataset.togglegroup;\n        // console.log(insightsTable);\n        // console.log(checkboxToggleGroup);\n        // CheckboxToggleAll.setGroupState(insightsTable, checkboxToggleGroup, false);\n    }\n};\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method init\n * @param {Number} courseid What course to fetch the data for\n * @param {Number} sectionid What section to fetch the data for\n * @return {object} jQuery promise\n */\nexport const init = () => {\n    registerListenerEvents();\n};\n"],"file":"select_all_users.min.js"}