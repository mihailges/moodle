{"version":3,"sources":["../src/actions.js"],"names":["define","$","Str","Ajax","Notification","Url","ModalFactory","ModalEvents","InsightSelection","initBulk","rootNode","executeAction","predictionIds","actionElement","call","methodname","args","predictionids","actionname","data","then","setSelectedInsights","params","contextid","closest","modelid","window","location","assign","relativeUrl","catch","exception","on","e","preventDefault","action","currentTarget","actionVisibleName","text","trim","getSelectedInsights","length","strings","get_strings","key","component","param","nitems","strs","create","type","types","SAVE_CANCEL","title","body","modal","setSaveButtonText","show","getRoot","save"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to manage report insights actions that are executed using AJAX.\n *\n * @package    report_insights\n * @copyright  2017 David Monllao {@link http://www.davidmonllao.com}\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * This module manages prediction actions that require AJAX requests.\n *\n * @module report_insights/actions\n */\ndefine(['jquery',\n        'core/str',\n        'core/ajax',\n        'core/notification',\n        'core/url',\n        'core/modal_factory',\n        'core/modal_events',\n        'report_insights/insight_selection'],\n        function($, Str, Ajax, Notification, Url, ModalFactory, ModalEvents, InsightSelection) {\n\n    return {\n\n        /**\n         * Attach on click handlers for bulk actions.\n         *\n         * @param {String} rootNode\n         * @access public\n         */\n        initBulk: function(rootNode) {\n\n            /**\n             * Executes the provided action.\n             *\n             * @param  {Array}  predictionIds\n             * @param  {Object} actionElement\n             * @return {Promise}\n             */\n            var executeAction = function(predictionIds, actionElement) {\n\n                return Ajax.call([\n                    {\n                        methodname: 'report_insights_action_executed',\n                        args: {\n                            predictionids: predictionIds,\n                            actionname: actionElement.data('bulk-actionname')\n                        }\n                    }\n                ])[0].then(function() {\n                    // Once the action has been finished, reset the selected insights.\n                    InsightSelection.setSelectedInsights([], actionElement.data('togglegroup'));\n\n                    let params = {\n                        contextid: actionElement.closest('div.insight-container').data('context-id'),\n                        modelid: actionElement.closest('div.insight-container').data('model-id')\n                    };\n                    // Reload the insight report page to display the latest state.\n                    window.location.assign(Url.relativeUrl(\"report/insights/insights.php\", params, false));\n\n                }).catch(Notification.exception);\n            };\n\n            $(rootNode + ' [data-bulk-actionname]').on('click', function(e) {\n                e.preventDefault();\n                var action = $(e.currentTarget);\n                var actionVisibleName = action.text().trim();\n                // Get the selected insights.\n                var predictionIds = InsightSelection.getSelectedInsights(action.data('togglegroup'));\n\n                if (predictionIds.length === 0) {\n                    // No items selected message.\n                    return this;\n                }\n\n                var strings = [];\n                Str.get_strings([{\n                    key: 'confirmbulkaction',\n                    component: 'report_insights',\n                    param: {\n                        action: actionVisibleName,\n                        nitems: predictionIds.length\n                    }\n                }, {\n                    key: 'confirm',\n                    component: 'moodle'\n                }]\n                ).then(function(strs) {\n                    strings = strs;\n                    return ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: actionVisibleName,\n                        body: strings[0],\n                    });\n                }).then(function(modal) {\n                    modal.setSaveButtonText(strings[1]);\n                    modal.show();\n                    modal.getRoot().on(ModalEvents.save, function() {\n                        // The action is now confirmed, sending an action for it.\n                        return executeAction(predictionIds, action);\n                    });\n\n                    return modal;\n                }).catch(Notification.exception);\n\n                return this;\n            });\n        },\n    };\n});\n"],"file":"actions.min.js"}