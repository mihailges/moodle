{"version":3,"sources":["../src/select_all_users.js"],"names":["SELECTORS","CONTAINERS","SELECTED_PREDICTIONS_INFO","ACTIONS","SELECT_ALL_EXISTING","CLEAR_ALL","selectedPredictions","registerListenerEvents","PubSub","subscribe","CheckboxToggleAll","events","checkboxToggled","data","handleCheckboxToggle","document","addEventListener","e","target","matches","selectedPredictionsInfo","querySelector","allPredictions","JSON","parse","dataset","allpredictionids","togglegroup","length","action","text","notificationData","insightsselected","renderNotification","checkboxToggleGroup","setGroupState","clearNotification","predictionIds","checkedSlaves","slaves","$","each","index","checkedSlave","predictionId","val","push","toggleGroupName","Templates","renderForPromise","html","js","replaceNodeContents","querySelectorAll","map","container","innerHTML","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @module     report_insights/select_all_users\n * @package    report_insights\n * @copyright  2020 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as PubSub from 'core/pubsub';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    CONTAINERS: {\n        SELECTED_PREDICTIONS_INFO: '[data-region=\"selected-predictions-info\"]'\n    },\n    ACTIONS: {\n        SELECT_ALL_EXISTING: '[data-action=\"select-all-existing\"]',\n        CLEAR_ALL: '[data-action=\"clear-all-selected\"]',\n    }\n};\n\nexport let selectedPredictions;\n\n/**\n * Register related event listeners.\n *\n * @method registerListenerEvents\n */\nconst registerListenerEvents = () => {\n    PubSub.subscribe(CheckboxToggleAll.events.checkboxToggled, (data) => {\n        handleCheckboxToggle(data);\n    });\n\n    document.addEventListener('click', async (e) => {\n        if (e.target.matches(SELECTORS.ACTIONS.SELECT_ALL_EXISTING)) { // All existing insights are selected.\n            const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n            const allPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n            selectedPredictions[e.target.dataset.togglegroup] = allPredictions;\n\n            const notificationData = {\n                insightsselected: await getString('allinsightsselected', 'report_insights', allPredictions.length),\n                action:  {\n                    action: 'clear-all-selected',\n                    togglegroup: e.target.dataset.togglegroup,\n                    text: await getString('clearselection', 'report_insights')\n                }\n            };\n\n            renderNotification(notificationData);\n        }\n\n        if (e.target.matches(SELECTORS.ACTIONS.CLEAR_ALL)) { // Insight selection is cleared.\n            const checkboxToggleGroup = e.target.dataset.togglegroup;\n            CheckboxToggleAll.setGroupState(document, checkboxToggleGroup, false);\n            selectedPredictions = [];\n\n            clearNotification();\n        }\n    });\n};\n\n/**\n * Method that handles the 'checkboxToggled' event and displays a notification depending on the number of selected\n * insights.\n *\n * @method handleCheckboxToggle\n * @param {Object} data The data returned by the 'checkboxToggled' event.\n */\nconst handleCheckboxToggle = async (data) => {\n    selectedPredictions = [];\n    let predictionIds = [];\n    const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n    const allPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n    const checkedSlaves = data.checkedSlaves;\n    const slaves = data.slaves;\n\n    if (checkedSlaves.length > 0) {\n        let notificationData;\n\n        $.each(data.checkedSlaves, (index, checkedSlave) => {\n            const predictionId = $(checkedSlave).val();\n            predictionIds.push(predictionId);\n        });\n\n        selectedPredictions[data.toggleGroupName] = predictionIds;\n\n        // If all insights are selected on the given page and there are more available to be selected,\n        // provide an option for bulk selecting all existing insights.\n        if (slaves.length === checkedSlaves.length && allPredictions.length > slaves.length) {\n            const selectedPredictionsInfo = document.querySelector(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n            const allPredictions = JSON.parse(selectedPredictionsInfo.dataset.allpredictionids);\n\n            notificationData = {\n                insightsselected: await getString('allinsightsonpageselected', 'report_insights', data.checkedSlaves.length),\n                action:  {\n                    action: 'select-all-existing',\n                    togglegroup: data.toggleGroupName,\n                    text: await getString('selectallinsights', 'report_insights', allPredictions.length)\n                }\n            };\n\n        } else { // Some insights are selected or all existing insights are already selected.\n            notificationData = {\n                insightsselected: await getString('insightsselected', 'report_insights', data.checkedSlaves.length),\n            };\n        }\n\n        renderNotification(notificationData);\n\n    } else { // No insights selected.\n        // Clear any previous notifications.\n        clearNotification();\n    }\n};\n\n/**\n * Render notification.\n *\n * @method renderNotification\n * @param {Object} notificationData The object with the required data for the notification template.\n */\nconst renderNotification = async (notificationData) => {\n  //  const selectedInsightsContainer = document.querySelectorAll(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO);\n    const {html, js} = await Templates.renderForPromise('report_insights/insights_selected', notificationData);\n    await Templates.replaceNodeContents(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO, html, js);\n};\n\n/**\n * Remove notification.\n *\n * @method clearNotification\n */\nconst clearNotification = () => {\n    [...document.querySelectorAll(SELECTORS.CONTAINERS.SELECTED_PREDICTIONS_INFO)].map(container => container.innerHTML = '');\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n */\nexport const init = () => {\n    registerListenerEvents();\n};\n"],"file":"select_all_users.min.js"}