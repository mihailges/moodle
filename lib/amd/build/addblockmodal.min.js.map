{"version":3,"sources":["../src/addblockmodal.js"],"names":["SELECTORS","ADD_BLOCK","addBlockModal","registerListenerEvents","pageType","pageLayout","addBlockUrl","document","addEventListener","e","target","closest","preventDefault","show","buildAddBlockModal","then","modal","modalBody","renderBlocks","catch","errorTemplateData","errormessage","message","Templates","render","setBody","ModalFactory","create","type","types","CANCEL","title","getAddableBlocks","blocks","url","request","methodname","args","pagecontextid","M","cfg","contextid","pagetype","pagelayout","Ajax","call","init"],"mappings":"sMAyBA,OACA,OAEA,O,qXAEMA,CAAAA,CAAS,CAAG,CACdC,SAAS,CAAE,yBADG,C,CAIdC,CAAa,CAAG,I,CAUdC,CAAsB,CAAG,SAACC,CAAD,CAAWC,CAAX,CAAuBC,CAAvB,CAAuC,CAClEC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CAEpC,GAAIA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBX,CAAS,CAACC,SAA3B,CAAJ,CAA2C,CACvCQ,CAAC,CAACG,cAAF,GAEA,GAAIV,CAAJ,CAAmB,CAEfA,CAAa,CAACW,IAAd,EACH,CAHD,IAGO,CACHC,CAAkB,GACjBC,IADD,CACM,SAAAC,CAAK,CAAI,CACX,GAAMC,CAAAA,CAAS,CAAGC,CAAY,CAACZ,CAAD,CAAcF,CAAd,CAAwBC,CAAxB,CAAZ,CAAgDc,KAAhD,CAAsD,SAAAV,CAAC,CAAI,CAGzE,GAAMW,CAAAA,CAAiB,CAAG,CACtBC,YAAY,CAAEZ,CAAC,CAACa,OADM,CAA1B,CAGA,MAAOC,WAAUC,MAAV,CAAiB,2BAAjB,CAA8CJ,CAA9C,CACV,CAPiB,CAAlB,CAQAJ,CAAK,CAACS,OAAN,CAAcR,CAAd,EACAD,CAAK,CAACH,IAAN,GAEA,MAAOG,CAAAA,CACV,CAdD,EAeCD,IAfD,CAeM,SAAAC,CAAK,CAAI,CACXd,CAAa,CAAGc,CAAhB,CAEA,MAAOA,CAAAA,CACV,CAnBD,CAoBH,CACJ,CACJ,CA/BD,CAgCH,C,CAQKF,CAAkB,CAAG,UAAM,CAC7B,MAAOY,WAAaC,MAAb,CAAoB,CACvBC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,MADF,CAEvBC,KAAK,CAAE,iBAAU,UAAV,CAFgB,CAApB,CAIV,C,CAWKb,CAAY,4CAAG,WAAMZ,CAAN,CAAmBF,CAAnB,CAA6BC,CAA7B,wGAEI2B,CAAAA,CAAgB,CAAC5B,CAAD,CAAWC,CAAX,CAFpB,QAEX4B,CAFW,iCAIVV,UAAUC,MAAV,CAAiB,qBAAjB,CAAwC,CAC3CS,MAAM,CAAEA,CADmC,CAE3CC,GAAG,CAAE5B,CAFsC,CAAxC,CAJU,0CAAH,uD,CAkBZ0B,CAAgB,4CAAG,WAAM5B,CAAN,CAAgBC,CAAhB,yFACf8B,CADe,CACL,CACZC,UAAU,CAAE,oCADA,CAEZC,IAAI,CAAE,CACFC,aAAa,CAAEC,CAAC,CAACC,GAAF,CAAMC,SADnB,CAEFC,QAAQ,CAAEtC,CAFR,CAGFuC,UAAU,CAAEtC,CAHV,CAFM,CADK,0BAUduC,UAAKC,IAAL,CAAU,CAACV,CAAD,CAAV,EAAqB,CAArB,CAVc,0CAAH,uD,QAqBF,QAAPW,CAAAA,IAAO,CAAC1C,CAAD,CAAWC,CAAX,CAAuBC,CAAvB,CAAuC,CACvDH,CAAsB,CAACC,CAAD,CAAWC,CAAX,CAAuBC,CAAvB,CACzB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Show an add block modal instead of doing it on a separate page.\n *\n * @module     core/addblockmodal\n * @class      addblockmodal\n * @package    core\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nconst SELECTORS = {\n    ADD_BLOCK: '[data-key=\"addblock\"]'\n};\n\nlet addBlockModal = null;\n\n/**\n * Register related event listeners.\n *\n * @method registerListenerEvents\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} addBlockUrl The add block URL\n */\nconst registerListenerEvents = (pageType, pageLayout, addBlockUrl) => {\n    document.addEventListener('click', e => {\n\n        if (e.target.closest(SELECTORS.ADD_BLOCK)) {\n            e.preventDefault();\n\n            if (addBlockModal) { // The 'add block' modal has been already created.\n                // Display the 'add block' modal.\n                addBlockModal.show();\n            } else {\n                buildAddBlockModal()\n                .then(modal => {\n                    const modalBody = renderBlocks(addBlockUrl, pageType, pageLayout).catch(e => {\n                        // The blocks cannot be rendered due to an error.\n                        // Display the error within the modal.\n                        const errorTemplateData = {\n                            errormessage: e.message\n                        };\n                        return Templates.render('core/add_block_body_error', errorTemplateData);\n                    });\n                    modal.setBody(modalBody);\n                    modal.show();\n\n                    return modal;\n                })\n                .then(modal => {\n                    addBlockModal = modal;\n\n                    return modal;\n                });\n            }\n        }\n    });\n};\n\n/**\n * Method that creates the 'add block' modal.\n *\n * @method buildAddBlockModal\n * @return {Promise} The modal promise (modal's body will be rendered later).\n */\nconst buildAddBlockModal = () => {\n    return ModalFactory.create({\n        type: ModalFactory.types.CANCEL,\n        title: getString('addblock')\n    });\n};\n\n/**\n * Method that renders the list of available blocks.\n *\n * @method renderBlocks\n * @param {String} addBlockUrl The add block URL\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @return {Promise}\n */\nconst renderBlocks = async(addBlockUrl, pageType, pageLayout) => {\n    // Fetch all addable blocks in the given page.\n    const blocks = await getAddableBlocks(pageType, pageLayout);\n\n    return Templates.render('core/add_block_body', {\n        blocks: blocks,\n        url: addBlockUrl\n    });\n};\n\n/**\n * Method that fetches all addable blocks in a given page.\n *\n * @method getAddableBlocks\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @return {Promise}\n */\nconst getAddableBlocks = async(pageType, pageLayout) => {\n    const request = {\n        methodname: 'core_block_get_page_addable_blocks',\n        args: {\n            pagecontextid: M.cfg.contextid,\n            pagetype: pageType,\n            pagelayout: pageLayout\n        },\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} addBlockUrl The add block URL\n */\nexport const init = (pageType, pageLayout, addBlockUrl) => {\n    registerListenerEvents(pageType, pageLayout, addBlockUrl);\n};\n"],"file":"addblockmodal.min.js"}